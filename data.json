{"posts":[{"title":"Immutable State and React","date":"2016-03-23T19:40:00.000Z","tags":"mobile, web, ios, android, chrome","slug":"react-and-immutable","scripts":["//assets.codepen.io/assets/embed/ei.js"],"url":"/blog/react-and-immutable","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2016/03/testing.md","markdown":"Over the past six months I've had the opportunity, nay, the privilege, nay, the honor to work with reactjs.  This library is growing in popularity at an astounding rate.  My current employer was both smart and lucky to have chosen this library as the ground work for its front end architecture and I consider myself blessed to be apart of its development process.\n\n## Love hate of state\n\nWhile learning, building, and refactoring react components I've come to both love and hate state. I learned fast that many stateful components was a bad idea; instead passing down props while having stateless components was a very good idea.\n\nHaving a \"global\" app state has worked wonderfully. This can also lead to interesting problems with mutability of your state as it gets passed down as props through components. You will learn fast as I did that mutable state is not a fun problem to solve.\n\n## Immutable.js win\n\nHere is where we introduce [Immutable.js](https://facebook.github.io/immutable-js/) in all its wonderful immutableness.  Storing an apps state as an immutable map has saved hours worth of debugging, helped data management and has guided better conceptual understanding of app data flow.\n\n### React app diagram\n\nHere is a diagram of a react app structure that I've used many times. Simple, clean, top down approach.\n\n![Top down React app](/images/reactApp.png \"Top down React App\")\n\nStore app state in a top level \"view\" component that passes its state down as props to subcomponents that handle data display and interaction. The interaction(updating) happens by passing functions down as props. These functions get called by the sub components with updated data that gets merged into the state that in turn gets passed down again as props.\n\n> ES2015, React and Immutable.js - yup\n\nHere is a small codepen example using ES2015, React, and Immutable.js that uses babel.io precompiler.\n\n<p data-height=\"400\" data-theme-id=\"9092\" data-slug-hash=\"NqwjpN\" data-default-tab=\"result\" data-user=\"hartzis\" class='codepen'>See the Pen <a href='http://codepen.io/hartzis/pen/NqwjpN/'>React and Immutable, Top Down</a> by Brian Emil Hartz (<a href='http://codepen.io/hartzis'>@hartzis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>","outputFile":"/blog/react-and-immutable.html","html":"<p>Over the past six months I&#39;ve had the opportunity, nay, the privilege, nay, the honor to work with reactjs. This library is growing in popularity at an astounding rate. My current employer was both smart and lucky to have chosen this library as the ground work for its front end architecture and I consider myself blessed to be apart of its development process.</p><a name=love-hate-of-state class=anchor href=#love-hate-of-state><h2><span class=header-link></span>Love hate of state</h2></a><p>While learning, building, and refactoring react components I&#39;ve come to both love and hate state. I learned fast that many stateful components was a bad idea; instead passing down props while having stateless components was a very good idea.</p><p>Having a &quot;global&quot; app state has worked wonderfully. This can also lead to interesting problems with mutability of your state as it gets passed down as props through components. You will learn fast as I did that mutable state is not a fun problem to solve.</p><a name=immutablejs-win class=anchor href=#immutablejs-win><h2><span class=header-link></span>Immutable.js win</h2></a><p>Here is where we introduce <a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a> in all its wonderful immutableness. Storing an apps state as an immutable map has saved hours worth of debugging, helped data management and has guided better conceptual understanding of app data flow.</p><a name=react-app-diagram class=anchor href=#react-app-diagram><h3><span class=header-link></span>React app diagram</h3></a><p>Here is a diagram of a react app structure that I&#39;ve used many times. Simple, clean, top down approach.</p><p><img src=/images/reactApp.png alt=\"Top down React app\" title=\"Top down React App\"></p><p>Store app state in a top level &quot;view&quot; component that passes its state down as props to subcomponents that handle data display and interaction. The interaction(updating) happens by passing functions down as props. These functions get called by the sub components with updated data that gets merged into the state that in turn gets passed down again as props.</p><blockquote><p>ES2015, React and Immutable.js - yup</p></blockquote><p>Here is a small codepen example using ES2015, React, and Immutable.js that uses babel.io precompiler.</p><p data-height=400 data-theme-id=9092 data-slug-hash=NqwjpN data-default-tab=result data-user=hartzis class=codepen>See the Pen <a href=\"http://codepen.io/hartzis/pen/NqwjpN/\">React and Immutable, Top Down</a> by Brian Emil Hartz (<a href=http://codepen.io/hartzis>@hartzis</a>) on <a href=http://codepen.io>CodePen</a>.</p>","preview":"<p>Over the past six months I&#39;ve had the opportunity, nay, the privilege, nay, the honor to work with reactjs. This library is growing in popularity at an astounding rate. My current employer was both smart and lucky to have chosen this library as the ground work for its front end architecture and I consider myself blessed to be apart of its development process.</p><a name=love-hate-of-state class=anchor href=#love-hate-of-state><h2><span class=header-link></span>Love hate of state</h2></a>"},{"title":"Why I switched to Android after 7 years of iOS","date":"2016-03-22T19:40:00.000Z","tags":"mobile, web, ios, android, chrome","slug":"why-i-switched-to-android","url":"/blog/why-i-switched-to-android","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2016/03/why-i-switched-to-android.md","markdown":"Monday of last week I was all excited. I had just gotten the green light to start prototyping a new [Progressive Web App](https://developers.google.com/web/progressive-web-apps?hl=en) for a client I've been working with.\n\nI pulled out an older Android phone that I keep around for development. Then I also got my sleek, new, shiny iPhone 6s out of my pocket, with its smooth curves and speedy OS. But as I looked at my iPhone I was kind of bummed out.\n\nI realized that this slick piece of Apple hardware was *less* capable as a platform for web applications than my dusty old Android dev phone.\n\nAt that point I knew I was over iOS.\n\nSo, instead of opening my text editor I placed an order for a Nexus 6P and signed up for [Google fi phone service](http://fi.google.com/) (which is awesome, btw).\n\nJust like that, after 7-some years, bye bye iOS.\n\n## What!? What’s wrong with iOS?\n\nRemember the original iPhone announcement? Where Steve introduced the amazing combination of a mobile phone, an iPod, and an *Internet communications device*.\n\nI don’t know about you, but the idea of having a fully capable web browser in my pocket was *a huge part* of the appeal.\n\nThat’s never changed.\n\nOf course I don’t know the full backstory, but it sure seemed like the original plan for 3rd party developers on iOS was to have us all just build apps using the web. Safari added support for making web apps that could be added to your home screen as an icon and by including a few magical `<meta>` tags you could use to create something that could sort of be “installed” to your home screen. Then, when you opened it would run in “standalone mode”.\n\nThese were, in many ways, the original “Progressive Web Apps” and this was sometime around 2009!\n\nThink about it…\n\n1. They started in the browser, but then you could kind of upgrade them to “home screen status”.\n2. When you ran them from the home screen they’d open with a splash screen and without any visible browser UI.\n3. You could pick a loading screen and app icon.\n4. You could even even pick from a few different status bar colors!\n\nI don’t know whether or not this type of app was actually intended to be the primary mechanism for 3rd party dev to build apps for iOS but regardless… it was way ahead of its time.\n\nUnfortunately, the web platform itself wasn’t quite ready for the spotlight yet. It was *sort of* possible to build web apps that looked and performed like native apps, I was trying to do this 6 years ago using [David Kaneda’s](https://twitter.com/davidkaneda) awesome, [jQTouch](http://jqtjs.com/) lib. Hilariously, [the corny little demo video](https://vimeo.com/8254856) that I posted, led to a call from David and almost got me a job at [extjs](https://www.sencha.com/products/extjs/) right as they were rebranding to Sencha and starting to build [Sencha Touch](https://www.sencha.com/products/touch/). But the story for offline was terrible.\n\nBut anyway, as it turned out, the capabilities of the web on iOS were not quite enough to satiate ravenous developers. So developers were left clawing for the ability to build stuff that ran natively on the device to give them better performance and deeper API access.\n\n## Enter the iOS SDK and App Store\n\nApple made what turned out to be a really smart business decision: they released an iOS SDK and an App Store and the rest is history.\n\nFirst, I was excited about “apps” just like everyone else seemed to be. Just think, here we had been busy building “applications” when we really should’ve been building “apps” all along! Who knew?! ;)\n\nAnyway, I quickly found myself hunting for the best apps and switching to whatever bank, social networks, and other services had the best iOS apps. I bought a book on iOS development and built a hello world or two. My old co-worker [Ryan Youngman](https://twitter.com/cruffledoh) made iSaber to let you swing a fake lightsaber at your friends with your phone. Every developer I knew was talking about iOS development but at some point the fun of all this iOS stuff dried up.\n\nSeeing the hoops you had to jump through to ship an app on iOS didn’t seem right.\n\n**How quickly developers traded away the wide-open-spaces of the web for a walled castle with a monarch enforcing a 30% tax.**\n\nSo, I decided to focus on building “installable web apps” for iOS instead because surely, the web would catch up.\n\n## However, this became problematic\n\nDespite the popularity of native apps the original idea of these standalone installable web apps has continued to be supported for new versions of iOS. But, they didn’t fit into Apple’s business model! The App Store turned into a huge business, the term “app” was going mainstream, and every business suddenly felt they needed to have their own “app” whether they had any users or not.\n\nAs Apple’s app business took off these capabilities very clearly, very quickly, and somewhat unsurprisingly were deprioritized. The end result, for those of us still trying to build installable web apps for iOS was that with nearly every new iOS release some key feature that we were depending on broke.\n\nI’m talking about stuff that QA should have caught, stuff that if *anybody* at Apple was actually building apps this way would have noticed before they released.\n\nOne quick example that bit me was how they broke the ability to link out to an external website from within an app running in “standalone” mode. `target=_blank` no longer worked, neither did `window.open` or anything else I could think of. So now since our “standalone” app didn’t have a URL bar or back button it would simply take the user to the link they clicked within the same full-screen web view *with no way to return to the app*! The *only* way out was forcibly quitting the app (hopefully the user knew how to do that).\n\nWe were running a chat product at the time, so anytime someone pasted a URL into chat it was essentially a trap.\n\nThese sorts of issues continued to happen release after release. Soon it became obvious that while you can *sort of* build these types of apps on iOS you can’t really depend on them not breaking with the next update.\n\nThe message from Apple seemed clear: web apps are second-class citizens on iOS\n\n\n## What of Android?\n\nI didn’t care much at the time, but somewhere in the middle of all of this, Android appeared on the scene. It promised to be a more open alternative as a mobile platform. It was a collaboration between several big companies, it was their attempt to essentially fight off the fruit-company-comeback-kid-turned-gorilla and its Mighty Joe App Store.\n\nIt started gaining traction, but its web experience at the beginning was quite sub-par.\n\n\n## Fast-Forward five years…\n\n1. People are [somewhat burnt out on Apps](https://medium.com/swlh/nobody-wants-your-app-6af1f7f69cb7).\n2. The vast majority of developers building native iOS apps never even make back their expenses. [We knew this in 2013](http://www.forbes.com/sites/tristanlouis/2013/08/10/how-much-do-average-apps-make/#426a415f12cb).\n3. A *few* games are still making money, but that’s a lottery.\n4. Meanwhile, there are over 1.4 billion active Android users.\n5. Android switched to using Chrome as the default browser.\n6. Chrome, Opera, and Firefox have added features to allow building actual app experiences via the Web.\n\nAnd here I am… switching to Android.\n\n## So why Android? Isn’t it just more of the same?\n\nYes. It is. Android itself bores me, honestly. There’s nothing all that terribly new or exciting here.’\n\n**save one very important detail…**\n\n**IT’S CURRENTLY THE BEST MOBILE WEB APP PLATFORM**\n\n## What do you mean?! Doesn’t Safari run my JS is faster?\n\nMost people when they say this are referring to [this post by Jeff Atwood (a.k.a. codinghorror)](https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889), which [I wrote a whole response post to, if you’re interested](https://joreteg.com/blog/viability-of-js-frameworks-on-mobile).\n\nSo yeah, Safari runs my JS faster, but guess what… most of your users won’t have a shiny new iPhone 6s, and as [I’ve said before](https://www.youtube.com/watch?v=okk0BGV9oY0), betting on desktop-like performance on the mobile web, or sending huge frameworks like Ember to a mobile device probably isn’t a great idea.\n\nWith performance, there is such a thing as “good enough”. It wouldn’t matter if Safari ran JS 50x faster! The *only* thing that matters is whether my app runs *fast enough*. Beyond that, as a user, I don’t care.\n\nAs it turns out, it’s possible to write web apps that [run at 60fps even on older, crappier hardware](http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org).\n\nBut, all that aside, note this: I said “*better app platform*” not faster JavaScript runtime.\n\n## So why not just use Chrome for iOS?!\n\nAs I started tweeted about switching I was surprised to realize that many people don’t know that Chrome, Opera, and Firefox for iOS all just using WebKit web views under the hood.\n\nIn fact, apps that include a different browser engine are a violation of Apple’s terms of service.\n\nThey're just different UIs on the same browser engine.\n\n## But isn’t WebKit getting better?\n\nYes, it seems like [they're picking up some momentum recently](https://developer.apple.com/library/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html).\n\nBut, there’s a whole lot more to it than just what happens in the browser window. I want the ability to create app-like experiences on the OS with web technology.\n\nVery little seems to be happening in that regard as far as I can tell.\n\n## Let's look at Apple and WebRTC\n\nA few years ago when I built [SimpleWebRTC](http://simplewebrtc.com) and the first version of [Talky.io](https://talky.io).\n\nI seem to have been one of the early web geeks to get really excited about WebRTC (the browser web technology that now powers Google Hangout video calls). Anyway, I managed to figure out how to build one of the first, possibly *the first* multi-user, peer-to-peer, video calling WebRTC app on the web that worked with more than 2 people and worked between Chrome and FireFox.\n\nThis was my first experience with Apple lagging behind in implementing new web APIs. Though Chrome and FireFox were both actively implementing and excited about WebRTC, there was not a peep from Apple. iOS still hasn’t added WebRTC support to this day. Though, they’ve apparently been hiring WebRTC engineers of the Safari team. So here’s hoping…\n\nBut it kinda makes sense, right? Why would they? They’d rather you use FaceTime, right?\n\nThey seem fine with improving *the browser engine*, but seem very slow to do anything that involves increasing the web’s reach in the OS.\n\nAnyway, we shipped [Talky.io](https://talky.io) as a web app that worked in Chrome and FireFox and eventually [@hjon](https://twitter.com/hjon) built an iOS app for it too.\n\nBut the thing that blew my mind was one day I just downloaded Chrome on Android, opened it to Talky.io and sure enough… IT JUST FRIGGIN’ WORKED!\n\nSince then I’ve been paying much closer attention to what’s happening in mobile Chrome and it’s very impressive.\n\n## Meanwhile on Android\n\nDuring the last couple of years, a few very bright, very persistent, and idealistic developers (many of them at Google) who believed in the web have been at work pushing for, and implementing new web standards that fill the gaps between native and web.\n\nIncredibly cool new stuff is coming, like:\n\n- WebBluetooth (yup, talking to bluetooth devices from JS on a webpage)\n- WebNFC is coming too, apparently\n\nThese things are going to blow the roof off IoT stuff (but that’s a whole other blog post).\n\nJust type `chrome://flags` in the URL bar of Chrome for Android and read through all the stuff that's currently in the works. It's amazing!\n\nAnyway, in the past couple of years these fine folks have built a feature that has me more excited than I’ve been by any web tech for a loooooong time:\n\n**ServiceWorker and the concept of Progressive Web Apps.**\n\n**I believe that the introduction of ServiceWorker and Progressive Web Apps on Android is the most important thing to happen to the mobile web since Steve first introduced the iPhone.**\n\nWhy?! Because, for the first time, we have a mobile platform with a huge user base that lets me build a web app that is treated as a first-class citizen by the platform!\n\n(note: yes, I’m aware there have been other attempts to do this, but none of those had 1.4 billion active users.)\n\nThese folks **finally gave the us a platform where web apps were first-class citizens**!\n\nAnd to be clear, I’m not just talking about a way to put a glorified bookmark on the home screen.\n\nI’m talking about a way for us to build web apps that are *indistinguishable* from native apps.\n\nThe terms that’s sticking for these types of apps are “Progressive Web Apps”.\n\nIn fact, I think Progressive Web Apps (PWAs) actually have a huge leg-up on native apps because you can start using them immediately. You don't have to jump to an app store and wait a minute or two until some huge binary is done downloading. They’re just web apps, they have URLs, they can be built to load super fast. Because… well, we’ve been optimizing load time performance on the web for a long time.\n\nThere’s just *so much less friction* for users to start using them. Just think what that would do to your conversion numbers!\n\nBecause of the improved on-boarding experience I believe that businesses targeting Android users should be strongly questioning whether they should be building native Android apps at all.\n\n## So what are Progressive Web Apps anyway?\n\nUnfortunately, for some reason Google has managed to teach a generation of devs the words “Polymer” and “Angular” while the vast majority of web developers that I meet and talk to today have still have **ZERO** idea what ServiceWorkers or Progressive Web Apps are.\n\nSome of this is because of the newness of it all, and some of this improving recently… but sheesh… I hope this changes.\n\nYou can think of a a progressive web app like this:\n\nIt’s an app written in HTML, CSS, and JS that can *completely masquerade as a native app*.\n\nThis includes:\n\n1. Living on the home screen\n2. Existing in the Android “app switcher” as a separate app (not as part of the browser app).\n3. True offline behavior… meaning when you tap the app icon… it *will* open regardless of current Internet status.\n4. The ability to run in the background and triggering OS-level notifications, even when the app and browser is closed.\n\nInstead of starting as a useless web page with a “please install our app” banner, these apps starts life running as a tab in your browser. Then *progressively* they become more installed/integrated into the OS.\n\nAt first, it’s really no different than any other website you visit. But, then if you return to that same website/app in your browser again, the browser itself will subtly ask the user if they’d like to add it to their home screen.\n\n*From this moment on it’s indistinguishable from a native app to the user*.\n\nAlso, if you build these correctly there’s usually nothing else the user has to download or wait for at all. This means that adding it to the home screen is *effectively an instant app install*. Again, imagine what that’ll do to your conversions? Eh? (no, I’m not Canadian)\n\nLuckily, we don’t have to entirely guess about the business impact. We actually have some real data from a certain $20 billion dollar online retailer in India called FlipKart, who did launched a PWA and have shared some of their numbers.\n\nKey highlights from FlipKart’s experience:\n\n- 40% returning visitors week over week\n- +63% conversions from Home screen visits\n- 3x time spent on FlipKart Lite\n\nThat data came from [Alex Russel’s recent Fluent Keynote on what’s next for mobile](https://www.oreilly.com/ideas/progressive-web-apps-and-whats-next-for-mobile). I encourage you to watch and share it with product managers and leaders at your company. It does a great job of explaining the how/why of Progressive Web Apps.\n\nFor related reading check out:\n\n- [Addy Osmani’s Getting started with Progressive Web Apps](https://addyosmani.com/blog/getting-started-with-progressive-web-apps/)\n- [Mozilla’s service worker examples at: ServiceWorke.rs](https://serviceworke.rs/)\n- [FlipKart’s original technical post about their PWA](http://tech-blog.flipkart.net/2015/11/progressive-web-app/)\n- [Jake Archibald’s Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/)\n- [Aditya Punjani's post on how they built FlipKart lite](https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883)\n\n## So what does this all mean for us?\n\nWe, as web developers, can finally build screaming fast, fully offline-able, and user-privacy-protecting apps that work cross-platform without the need for any friggin’ App Store taxes, approval processes, or doorslamming users up front with “please install my app to use this service”.\n\n\n## What about iOS support?\n\nWell, the beauty of it is, iOS user can still use your web app even if service worker support doesn’t exist.\n\nThey just don’t get the extra goodies, like offline and push notifications.\n\nBut you could also bundle the app with Cordova and use the [Service Worker plugin](https://www.npmjs.com/package/cordova-plugin-service-worker), that would, in theory let you use the same code to do those things but bundled up as an iOS app.\n\n## Why should I care? React Native exists now and solves the same problem.\n\nPersonally, I actually kind of wish tools like React Native didn’t exist. Stay with me, let me explain. React Native is an amazing and very impressive tool that lets us use our JS skills to write native iOS apps.\n\nBut as I’ve been saying… I don’t think we *should* be building native apps unless we absolutely have to.\n\nThe end result of React Native is that because it exists and because its largely aimed at *web developers* we now have web devs flocking to build native apps just because they can!\n\nI fear that this undermines our ability to use our collective bargaining power to encourage Apple to implement support for Progressive Web Apps.\n\nTo be clear, I completely understand why it was created and I have a lot of respect for the technical achievement it represents, and the developers behind it.\n\nI just don’t want us to stop pushing Apple to improve web support.\n\n\n## In summary\n\nSo, all this said, these things led me to finally exercising the only voting power I have as a consumer… I took my money and left.\n\nI don’t see this as switching to Android, I’m simply switching to the best mobile web app platform available today.\n\nThe web is the only truly open platform we’ve got. It’s the closest thing we have to a level playing field.\n\nThis is why I’m focusing all my efforts on building Progressive Web Apps… I hope you’ll do the same.\n\n—\n\nI’m [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter if you want to *nicely* tell me all the ways in which I’m wrong.\n\nSee ya on the Interwebz <3","outputFile":"/blog/why-i-switched-to-android.html","html":"<p>Monday of last week I was all excited. I had just gotten the green light to start prototyping a new <a href=\"https://developers.google.com/web/progressive-web-apps?hl=en\">Progressive Web App</a> for a client I&#39;ve been working with.</p><p>I pulled out an older Android phone that I keep around for development. Then I also got my sleek, new, shiny iPhone 6s out of my pocket, with its smooth curves and speedy OS. But as I looked at my iPhone I was kind of bummed out.</p><p>I realized that this slick piece of Apple hardware was <em>less</em> capable as a platform for web applications than my dusty old Android dev phone.</p><p>At that point I knew I was over iOS.</p><p>So, instead of opening my text editor I placed an order for a Nexus 6P and signed up for <a href=\"http://fi.google.com/\">Google fi phone service</a> (which is awesome, btw).</p><p>Just like that, after 7-some years, bye bye iOS.</p><a name=what-whats-wrong-with-ios class=anchor href=#what-whats-wrong-with-ios><h2><span class=header-link></span>What!? What’s wrong with iOS?</h2></a><p>Remember the original iPhone announcement? Where Steve introduced the amazing combination of a mobile phone, an iPod, and an <em>Internet communications device</em>.</p><p>I don’t know about you, but the idea of having a fully capable web browser in my pocket was <em>a huge part</em> of the appeal.</p><p>That’s never changed.</p><p>Of course I don’t know the full backstory, but it sure seemed like the original plan for 3rd party developers on iOS was to have us all just build apps using the web. Safari added support for making web apps that could be added to your home screen as an icon and by including a few magical <code>&lt;meta&gt;</code> tags you could use to create something that could sort of be “installed” to your home screen. Then, when you opened it would run in “standalone mode”.</p><p>These were, in many ways, the original “Progressive Web Apps” and this was sometime around 2009!</p><p>Think about it…</p><ol><li>They started in the browser, but then you could kind of upgrade them to “home screen status”.</li><li>When you ran them from the home screen they’d open with a splash screen and without any visible browser UI.</li><li>You could pick a loading screen and app icon.</li><li>You could even even pick from a few different status bar colors!</li></ol><p>I don’t know whether or not this type of app was actually intended to be the primary mechanism for 3rd party dev to build apps for iOS but regardless… it was way ahead of its time.</p><p>Unfortunately, the web platform itself wasn’t quite ready for the spotlight yet. It was <em>sort of</em> possible to build web apps that looked and performed like native apps, I was trying to do this 6 years ago using <a href=https://twitter.com/davidkaneda>David Kaneda’s</a> awesome, <a href=\"http://jqtjs.com/\">jQTouch</a> lib. Hilariously, <a href=https://vimeo.com/8254856>the corny little demo video</a> that I posted, led to a call from David and almost got me a job at <a href=\"https://www.sencha.com/products/extjs/\">extjs</a> right as they were rebranding to Sencha and starting to build <a href=\"https://www.sencha.com/products/touch/\">Sencha Touch</a>. But the story for offline was terrible.</p><p>But anyway, as it turned out, the capabilities of the web on iOS were not quite enough to satiate ravenous developers. So developers were left clawing for the ability to build stuff that ran natively on the device to give them better performance and deeper API access.</p><a name=enter-the-ios-sdk-and-app-store class=anchor href=#enter-the-ios-sdk-and-app-store><h2><span class=header-link></span>Enter the iOS SDK and App Store</h2></a><p>Apple made what turned out to be a really smart business decision: they released an iOS SDK and an App Store and the rest is history.</p><p>First, I was excited about “apps” just like everyone else seemed to be. Just think, here we had been busy building “applications” when we really should’ve been building “apps” all along! Who knew?! ;)</p><p>Anyway, I quickly found myself hunting for the best apps and switching to whatever bank, social networks, and other services had the best iOS apps. I bought a book on iOS development and built a hello world or two. My old co-worker <a href=https://twitter.com/cruffledoh>Ryan Youngman</a> made iSaber to let you swing a fake lightsaber at your friends with your phone. Every developer I knew was talking about iOS development but at some point the fun of all this iOS stuff dried up.</p><p>Seeing the hoops you had to jump through to ship an app on iOS didn’t seem right.</p><p><strong>How quickly developers traded away the wide-open-spaces of the web for a walled castle with a monarch enforcing a 30% tax.</strong></p><p>So, I decided to focus on building “installable web apps” for iOS instead because surely, the web would catch up.</p><a name=however-this-became-problematic class=anchor href=#however-this-became-problematic><h2><span class=header-link></span>However, this became problematic</h2></a><p>Despite the popularity of native apps the original idea of these standalone installable web apps has continued to be supported for new versions of iOS. But, they didn’t fit into Apple’s business model! The App Store turned into a huge business, the term “app” was going mainstream, and every business suddenly felt they needed to have their own “app” whether they had any users or not.</p><p>As Apple’s app business took off these capabilities very clearly, very quickly, and somewhat unsurprisingly were deprioritized. The end result, for those of us still trying to build installable web apps for iOS was that with nearly every new iOS release some key feature that we were depending on broke.</p><p>I’m talking about stuff that QA should have caught, stuff that if <em>anybody</em> at Apple was actually building apps this way would have noticed before they released.</p><p>One quick example that bit me was how they broke the ability to link out to an external website from within an app running in “standalone” mode. <code>target=_blank</code> no longer worked, neither did <code>window.open</code> or anything else I could think of. So now since our “standalone” app didn’t have a URL bar or back button it would simply take the user to the link they clicked within the same full-screen web view <em>with no way to return to the app</em>! The <em>only</em> way out was forcibly quitting the app (hopefully the user knew how to do that).</p><p>We were running a chat product at the time, so anytime someone pasted a URL into chat it was essentially a trap.</p><p>These sorts of issues continued to happen release after release. Soon it became obvious that while you can <em>sort of</em> build these types of apps on iOS you can’t really depend on them not breaking with the next update.</p><p>The message from Apple seemed clear: web apps are second-class citizens on iOS</p><a name=what-of-android class=anchor href=#what-of-android><h2><span class=header-link></span>What of Android?</h2></a><p>I didn’t care much at the time, but somewhere in the middle of all of this, Android appeared on the scene. It promised to be a more open alternative as a mobile platform. It was a collaboration between several big companies, it was their attempt to essentially fight off the fruit-company-comeback-kid-turned-gorilla and its Mighty Joe App Store.</p><p>It started gaining traction, but its web experience at the beginning was quite sub-par.</p><a name=fast-forward-five-years class=anchor href=#fast-forward-five-years><h2><span class=header-link></span>Fast-Forward five years…</h2></a><ol><li>People are <a href=https://medium.com/swlh/nobody-wants-your-app-6af1f7f69cb7>somewhat burnt out on Apps</a>.</li><li>The vast majority of developers building native iOS apps never even make back their expenses. <a href=http://www.forbes.com/sites/tristanlouis/2013/08/10/how-much-do-average-apps-make/#426a415f12cb>We knew this in 2013</a>.</li><li>A <em>few</em> games are still making money, but that’s a lottery.</li><li>Meanwhile, there are over 1.4 billion active Android users.</li><li>Android switched to using Chrome as the default browser.</li><li>Chrome, Opera, and Firefox have added features to allow building actual app experiences via the Web.</li></ol><p>And here I am… switching to Android.</p><a name=so-why-android-isnt-it-just-more-of-the-same class=anchor href=#so-why-android-isnt-it-just-more-of-the-same><h2><span class=header-link></span>So why Android? Isn’t it just more of the same?</h2></a><p>Yes. It is. Android itself bores me, honestly. There’s nothing all that terribly new or exciting here.’</p><p><strong>save one very important detail…</strong></p><p><strong>IT’S CURRENTLY THE BEST MOBILE WEB APP PLATFORM</strong></p><a name=what-do-you-mean-doesnt-safari-run-my-js-is-faster class=anchor href=#what-do-you-mean-doesnt-safari-run-my-js-is-faster><h2><span class=header-link></span>What do you mean?! Doesn’t Safari run my JS is faster?</h2></a><p>Most people when they say this are referring to <a href=https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889>this post by Jeff Atwood (a.k.a. codinghorror)</a>, which <a href=https://joreteg.com/blog/viability-of-js-frameworks-on-mobile>I wrote a whole response post to, if you’re interested</a>.</p><p>So yeah, Safari runs my JS faster, but guess what… most of your users won’t have a shiny new iPhone 6s, and as <a href=\"https://www.youtube.com/watch?v=okk0BGV9oY0\">I’ve said before</a>, betting on desktop-like performance on the mobile web, or sending huge frameworks like Ember to a mobile device probably isn’t a great idea.</p><p>With performance, there is such a thing as “good enough”. It wouldn’t matter if Safari ran JS 50x faster! The <em>only</em> thing that matters is whether my app runs <em>fast enough</em>. Beyond that, as a user, I don’t care.</p><p>As it turns out, it’s possible to write web apps that <a href=http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org>run at 60fps even on older, crappier hardware</a>.</p><p>But, all that aside, note this: I said “<em>better app platform</em>” not faster JavaScript runtime.</p><a name=so-why-not-just-use-chrome-for-ios class=anchor href=#so-why-not-just-use-chrome-for-ios><h2><span class=header-link></span>So why not just use Chrome for iOS?!</h2></a><p>As I started tweeted about switching I was surprised to realize that many people don’t know that Chrome, Opera, and Firefox for iOS all just using WebKit web views under the hood.</p><p>In fact, apps that include a different browser engine are a violation of Apple’s terms of service.</p><p>They&#39;re just different UIs on the same browser engine.</p><a name=but-isnt-webkit-getting-better class=anchor href=#but-isnt-webkit-getting-better><h2><span class=header-link></span>But isn’t WebKit getting better?</h2></a><p>Yes, it seems like <a href=https://developer.apple.com/library/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html>they&#39;re picking up some momentum recently</a>.</p><p>But, there’s a whole lot more to it than just what happens in the browser window. I want the ability to create app-like experiences on the OS with web technology.</p><p>Very little seems to be happening in that regard as far as I can tell.</p><a name=let39s-look-at-apple-and-webrtc class=anchor href=#let39s-look-at-apple-and-webrtc><h2><span class=header-link></span>Let&#39;s look at Apple and WebRTC</h2></a><p>A few years ago when I built <a href=http://simplewebrtc.com>SimpleWebRTC</a> and the first version of <a href=https://talky.io>Talky.io</a>.</p><p>I seem to have been one of the early web geeks to get really excited about WebRTC (the browser web technology that now powers Google Hangout video calls). Anyway, I managed to figure out how to build one of the first, possibly <em>the first</em> multi-user, peer-to-peer, video calling WebRTC app on the web that worked with more than 2 people and worked between Chrome and FireFox.</p><p>This was my first experience with Apple lagging behind in implementing new web APIs. Though Chrome and FireFox were both actively implementing and excited about WebRTC, there was not a peep from Apple. iOS still hasn’t added WebRTC support to this day. Though, they’ve apparently been hiring WebRTC engineers of the Safari team. So here’s hoping…</p><p>But it kinda makes sense, right? Why would they? They’d rather you use FaceTime, right?</p><p>They seem fine with improving <em>the browser engine</em>, but seem very slow to do anything that involves increasing the web’s reach in the OS.</p><p>Anyway, we shipped <a href=https://talky.io>Talky.io</a> as a web app that worked in Chrome and FireFox and eventually <a href=https://twitter.com/hjon>@hjon</a> built an iOS app for it too.</p><p>But the thing that blew my mind was one day I just downloaded Chrome on Android, opened it to Talky.io and sure enough… IT JUST FRIGGIN’ WORKED!</p><p>Since then I’ve been paying much closer attention to what’s happening in mobile Chrome and it’s very impressive.</p><a name=meanwhile-on-android class=anchor href=#meanwhile-on-android><h2><span class=header-link></span>Meanwhile on Android</h2></a><p>During the last couple of years, a few very bright, very persistent, and idealistic developers (many of them at Google) who believed in the web have been at work pushing for, and implementing new web standards that fill the gaps between native and web.</p><p>Incredibly cool new stuff is coming, like:</p><ul><li>WebBluetooth (yup, talking to bluetooth devices from JS on a webpage)</li><li>WebNFC is coming too, apparently</li></ul><p>These things are going to blow the roof off IoT stuff (but that’s a whole other blog post).</p><p>Just type <code>chrome://flags</code> in the URL bar of Chrome for Android and read through all the stuff that&#39;s currently in the works. It&#39;s amazing!</p><p>Anyway, in the past couple of years these fine folks have built a feature that has me more excited than I’ve been by any web tech for a loooooong time:</p><p><strong>ServiceWorker and the concept of Progressive Web Apps.</strong></p><p><strong>I believe that the introduction of ServiceWorker and Progressive Web Apps on Android is the most important thing to happen to the mobile web since Steve first introduced the iPhone.</strong></p><p>Why?! Because, for the first time, we have a mobile platform with a huge user base that lets me build a web app that is treated as a first-class citizen by the platform!</p><p>(note: yes, I’m aware there have been other attempts to do this, but none of those had 1.4 billion active users.)</p><p>These folks <strong>finally gave the us a platform where web apps were first-class citizens</strong>!</p><p>And to be clear, I’m not just talking about a way to put a glorified bookmark on the home screen.</p><p>I’m talking about a way for us to build web apps that are <em>indistinguishable</em> from native apps.</p><p>The terms that’s sticking for these types of apps are “Progressive Web Apps”.</p><p>In fact, I think Progressive Web Apps (PWAs) actually have a huge leg-up on native apps because you can start using them immediately. You don&#39;t have to jump to an app store and wait a minute or two until some huge binary is done downloading. They’re just web apps, they have URLs, they can be built to load super fast. Because… well, we’ve been optimizing load time performance on the web for a long time.</p><p>There’s just <em>so much less friction</em> for users to start using them. Just think what that would do to your conversion numbers!</p><p>Because of the improved on-boarding experience I believe that businesses targeting Android users should be strongly questioning whether they should be building native Android apps at all.</p><a name=so-what-are-progressive-web-apps-anyway class=anchor href=#so-what-are-progressive-web-apps-anyway><h2><span class=header-link></span>So what are Progressive Web Apps anyway?</h2></a><p>Unfortunately, for some reason Google has managed to teach a generation of devs the words “Polymer” and “Angular” while the vast majority of web developers that I meet and talk to today have still have <strong>ZERO</strong> idea what ServiceWorkers or Progressive Web Apps are.</p><p>Some of this is because of the newness of it all, and some of this improving recently… but sheesh… I hope this changes.</p><p>You can think of a a progressive web app like this:</p><p>It’s an app written in HTML, CSS, and JS that can <em>completely masquerade as a native app</em>.</p><p>This includes:</p><ol><li>Living on the home screen</li><li>Existing in the Android “app switcher” as a separate app (not as part of the browser app).</li><li>True offline behavior… meaning when you tap the app icon… it <em>will</em> open regardless of current Internet status.</li><li>The ability to run in the background and triggering OS-level notifications, even when the app and browser is closed.</li></ol><p>Instead of starting as a useless web page with a “please install our app” banner, these apps starts life running as a tab in your browser. Then <em>progressively</em> they become more installed/integrated into the OS.</p><p>At first, it’s really no different than any other website you visit. But, then if you return to that same website/app in your browser again, the browser itself will subtly ask the user if they’d like to add it to their home screen.</p><p><em>From this moment on it’s indistinguishable from a native app to the user</em>.</p><p>Also, if you build these correctly there’s usually nothing else the user has to download or wait for at all. This means that adding it to the home screen is <em>effectively an instant app install</em>. Again, imagine what that’ll do to your conversions? Eh? (no, I’m not Canadian)</p><p>Luckily, we don’t have to entirely guess about the business impact. We actually have some real data from a certain $20 billion dollar online retailer in India called FlipKart, who did launched a PWA and have shared some of their numbers.</p><p>Key highlights from FlipKart’s experience:</p><ul><li>40% returning visitors week over week</li><li>+63% conversions from Home screen visits</li><li>3x time spent on FlipKart Lite</li></ul><p>That data came from <a href=https://www.oreilly.com/ideas/progressive-web-apps-and-whats-next-for-mobile>Alex Russel’s recent Fluent Keynote on what’s next for mobile</a>. I encourage you to watch and share it with product managers and leaders at your company. It does a great job of explaining the how/why of Progressive Web Apps.</p><p>For related reading check out:</p><ul><li><a href=\"https://addyosmani.com/blog/getting-started-with-progressive-web-apps/\">Addy Osmani’s Getting started with Progressive Web Apps</a></li><li><a href=\"https://serviceworke.rs/\">Mozilla’s service worker examples at: ServiceWorke.rs</a></li><li><a href=\"http://tech-blog.flipkart.net/2015/11/progressive-web-app/\">FlipKart’s original technical post about their PWA</a></li><li><a href=\"https://jakearchibald.com/2014/offline-cookbook/\">Jake Archibald’s Offline Cookbook</a></li><li><a href=https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883>Aditya Punjani&#39;s post on how they built FlipKart lite</a></li></ul><a name=so-what-does-this-all-mean-for-us class=anchor href=#so-what-does-this-all-mean-for-us><h2><span class=header-link></span>So what does this all mean for us?</h2></a><p>We, as web developers, can finally build screaming fast, fully offline-able, and user-privacy-protecting apps that work cross-platform without the need for any friggin’ App Store taxes, approval processes, or doorslamming users up front with “please install my app to use this service”.</p><a name=what-about-ios-support class=anchor href=#what-about-ios-support><h2><span class=header-link></span>What about iOS support?</h2></a><p>Well, the beauty of it is, iOS user can still use your web app even if service worker support doesn’t exist.</p><p>They just don’t get the extra goodies, like offline and push notifications.</p><p>But you could also bundle the app with Cordova and use the <a href=https://www.npmjs.com/package/cordova-plugin-service-worker>Service Worker plugin</a>, that would, in theory let you use the same code to do those things but bundled up as an iOS app.</p><a name=why-should-i-care-react-native-exists-now-and-solves-the-same-problem class=anchor href=#why-should-i-care-react-native-exists-now-and-solves-the-same-problem><h2><span class=header-link></span>Why should I care? React Native exists now and solves the same problem.</h2></a><p>Personally, I actually kind of wish tools like React Native didn’t exist. Stay with me, let me explain. React Native is an amazing and very impressive tool that lets us use our JS skills to write native iOS apps.</p><p>But as I’ve been saying… I don’t think we <em>should</em> be building native apps unless we absolutely have to.</p><p>The end result of React Native is that because it exists and because its largely aimed at <em>web developers</em> we now have web devs flocking to build native apps just because they can!</p><p>I fear that this undermines our ability to use our collective bargaining power to encourage Apple to implement support for Progressive Web Apps.</p><p>To be clear, I completely understand why it was created and I have a lot of respect for the technical achievement it represents, and the developers behind it.</p><p>I just don’t want us to stop pushing Apple to improve web support.</p><a name=in-summary class=anchor href=#in-summary><h2><span class=header-link></span>In summary</h2></a><p>So, all this said, these things led me to finally exercising the only voting power I have as a consumer… I took my money and left.</p><p>I don’t see this as switching to Android, I’m simply switching to the best mobile web app platform available today.</p><p>The web is the only truly open platform we’ve got. It’s the closest thing we have to a level playing field.</p><p>This is why I’m focusing all my efforts on building Progressive Web Apps… I hope you’ll do the same.</p><p>—</p><p>I’m <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on twitter if you want to <em>nicely</em> tell me all the ways in which I’m wrong.</p><p>See ya on the Interwebz &lt;3</p>","preview":"<p>Monday of last week I was all excited. I had just gotten the green light to start prototyping a new <a href=\"https://developers.google.com/web/progressive-web-apps?hl=en\">Progressive Web App</a> for a client I&#39;ve been working with.</p><p>I pulled out an older Android phone that I keep around for development. Then I also got my sleek, new, shiny iPhone 6s out of my pocket, with its smooth curves and speedy OS. But as I looked at my iPhone I was kind of bummed out.</p>"},{"title":"The viability of JS frameworks on mobile","date":"2015-10-12T18:20:00.000Z","tags":"mobile, performance, frameworks, js","slug":"viability-of-js-frameworks-on-mobile","scripts":["//platform.twitter.com/widgets.js"],"url":"/blog/viability-of-js-frameworks-on-mobile","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/10/viability-of-frameworks-on-mobile.md","markdown":"Whether I like it or not, not everyone using my web apps will be running iOS 9 on an iPhone 6S or a Nexus 6P and connecting via super-speedy wifi.\n\nThe reality is often anything but that. 3G connections and older hardware is often the norm. Google reports that there are [1.4 billion active Android users][1]. Many of them, will no doubt, be running less-than-top-of-the-line hardware.\n\nAnd, if you read stuff like [Jeff Atwood’s recent post][2] on Android performance you may feel that things are pretty bleak for the mobile web. \n\nA few notable pull quotes from that post:\n\n> In a nutshell, the fastest known Android device available today -- and there are millions of Android devices much slower than that out there -- performs 5× slower than a new iPhone 6s, and a little worse than a 2012 era iPhone 5 in Ember. How depressing.\n\t\n> We've done enough research to know this issue is not really specific to Ember, but also affects Angular and **most other heavy/complex JavaScript on Android**. Why?\n\nPerhaps the “heavy/complex” part is the problem?\n\nContinuing…\n\n> This is becoming more and more of a systemic problem in the Android ecosystem, one that will not go away in the next few years, and it may affect the future of Discourse, since we bet heavily on near-desktop JavaScript performance on mobile devices. That is clearly happening on iOS but it is quite disastrously the opposite on Android.\n\nOk, there’s the state of the mobile web ecosystem, per Atwood.\n\nHe ends with this line:\n\n> I am no longer optimistic this will change in the next two years, and there are untold millions of slow Android devices out there, so we need to start considering alternatives for the Discourse project.\n\nBummer, right?! Let’s all go home. At least there’s React Native so we can all pretend we’re building web apps while actually writing native apps ;)\n\nSo, is the mobile web a dead-end for apps?\n\n## Hang on a minute…\n\nIf you didn’t catch it. The “Discourse” app Atwood is referring to is the app he used to publish the post *about* Discourse. It’s a forum app of sorts. So meta! \n\nAnyway, when I realized this, I open the network panel of dev tools on that Discourse page and there was 659kb of JS transferred across the wire (that’s the gzipped size). \n\nIn my opinion, that’s the same as forfeiting on mobile before you even start.\n\nI think we *have* to do better than this to be viable on mobile.\n\nI’m not blaming or even trying to criticize Atwood or Discourse here. A huge number of mobile web apps are built this way so this could really have been *any number* of sites.\n\nMy question is simply: are all these heavier tools/frameworks even viable for mobile use?\n\nI’m not convinced they all are. \n\n## Let’s look at some research\n\nThe fine folks at The Filament Group [published some research last December][4] about load time performance of the TodoMVC app of 5 popular web frameworks. Obviously, TodoMVC is a bit of a contrived example and may not be indicative of a real-world app. But, it’s a great fit for this type of research because it will include all the base assets for a given framework, and at least hopefully, the best practices as well.\n\nYou may be thinking: *”this is load time performance, Atwood was talking about runtime performance!”*\n\nYes, Atwood was discussing runtime performance, I’ll get to that shortly. *But, the user doesn’t care why they’re waiting*, so load time is clearly an important part of performance too.\n\nThe whole post is worth reading, but the summary of the research findings can be seen in their graphs:\n\n![load time screenshots][3]\n\nIn my opinion, the data for Angular and Ember (the two options that Atwood mentioned) flat out disqualify them for mobile use. \n\nIf you know that I co-created Ampersand you may assume that I’m  flaming against other frameworks and trying to sell you on Ampersand.\n\nNope.\n\nThe last two apps I built actually didn’t contain any Ampersand code at all. If you’ve read my [recent, excited post about Redux][5] that probably doesn’t surprise you. \n\n**I don’t care what you use, beyond how it affects how I experience your app as a user.**\n\nTools are merely a means to an end. \n\nOk, I lied. I do *sort of* care what you pick. But, only because I don’t want your experiences as a developer lead you to think the mobile web isn’t viable just because sending a megabyte of JS made the app slow.\n\n## It’s not game over\n\nMaybe the mobile web is fast enough and we just need to stop pretending we can get away with ineffeciencies that we don’t feel on a desktop.\n\nI think we need to be much more minimalist from the start.\n\nThe ever brilliant Dominic Tarr once said this:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">if you want to write fast software, use a slow computer</p>&mdash; Dominic Tarr (@dominictarr) <a href=\"https://twitter.com/dominictarr/status/629992939738005504\">August 8, 2015</a></blockquote>\n\nHow many web developers, to this day, don’t test on a phone locally when building apps? This isn’t just about small screens, we need to assume that we’re building for weaker, slower computers. I think we need to bake mobile into our dev workflow, not just as some final pre-launch check. If you’re curious, I [use this setup][6] while developing.\n\nRegardless, even though phones may continue to get faster and faster, I think it’s myopic to assume we can just ignore current speed problems in hopes that they’ll be resolved by faster hardware. Although, phones may continue to improve, I don’t think phones should be our only runtime target. \n\nAs this whole Internet of Things, um… thing becomes more of a thing (wow, that sentence was epically terrible #leavingitanyway). It seems likely there will be a some other platforms we’ll want to write for that are *not* phones. Things like watches, TVs, VR, and small computers hooked to to large displays.\n\n## That’s nice, Henrik. So what do you propose we do?\n\nFirst, as [I’ve written before][7], I think all the HTML we can infer from the URL alone should be rendered at build time to static HTML files. As it turns out, browsers, even “slow” mobile ones are pretty friggin’ fast at rendering HTML sent from the server.\n\nSecondly, I think we need to do more with less, let me explain…\n\nMuch of the hoop-jumping in Backbone, Ampersand, Ember, and Angular have to do with properly binding state to the UI. They certainly do more than that, but even many of the data features, on closer inspection have to do with supporting those binding capabilities. As a result, they all ship with an event system of some kind, and most have a way to create derived/calculated properties that can also be observed. \n\nYou can certainly use React as a view layer for any of those, but  one of the big wins with React is that at the point where you can do a cheap re-render it removes the need for many of those other features that add complexity to your system.\n\nAs a simple example, if you’ve got a `Backbone.Collection` with models in it, how do you go about rendering the length of that collection to the UI using Backbone paradigms? Getting the value in the template initially is certainly easy if you know it at the point when it’s first rendered. But, how do you bind that value so that any change in the collection will also update that length that you’ve rendered into the DOM?\n\nYou could set it up to re-render on all add/remove/change events or, you could create an observable property somewhere that did the same and then track that as you would any other property. That total would be updated with any changes, and then, you’d bind it to the view. \n\nBut all this feels a bit silly. If you’ve ever inspected an instance of a `Backbone.Collection` you know that `collection.models` is simply an array of `Backbone.Model`’s.  An Array already *has* a value for length, it’s called `.length` \\*\\*sigh\\*\\*!\n\nContrast that to React or anything else that allows us to inexpensively re-render our whole app at will (the promise of React). When we have that, we can just use that `length` property directly in our `render` method in the individual component that cares about it. Now whenever we have any change in any of the state in our app we re-render. \n\nSo now it becomes this simple:\n\n```js\nReact.createClass({\n  render: function () {\n  \treturn <span>{this.props.species.length}</span>\n  }\n})\n```\n\nOr, if using the [new stateless functional components][8] in React 0.14, with ES6 destructuring, and assuming `species` is our array of objects here it gets downright beautiful. The entire component could be written as:\n\n```js\nvar Aquarium = ({species}) => (\n  <span>{species.length}</span>\n);\n```\n\nAesthetics aside, just think how much less stuff we need:\n\n1. We no longer need to register multiple event listeners on the collection (less code, less memory use).\n2. We no longer need to define another property that we have to compute that creates an observable duplicate of what we already have with `.length` (less code, less memory).\n3. Shoot, we may not even need the collection or any of its models to be observable at all! The collection could be a plain ‘ol JavaScript array containing plain ‘ol JavaScript objects instead of custom created observable models (a lot less code, less memory, less computation)\n\n**We no longer need many of the features in those heavy frameworks at all.**\n\nReact then becomes the biggest pill you have to swallow. In my simple tests with React, and React-DOM 0.14, built with webpack and gzipped you end up around 37kb. \n\nFor comparison, jQuery 2.x weighs in at about 29kb min+gzip. So, really, we’re doing pretty good and my hope would be that eventually, much like happened with jQuery, many of the core features of React would simply be part of browser API.\n\nAnyway, now rather than needing observable models, observable collections, the ability to subscribe to changes on derived properties and all that jazz, we can probably get away with an architecture that works more like this:\n\n1. A single application state object as a JSON-like structure of plain JS arrays and objects.\n2. A set of mutator functions that represent all the ways that state can be changed to be used any time there needs to be a change in the state tree (you could follow immutability principles here too, if you’d like and just make sure you replace anything you change).\n3. Re-render the whole app any time these mutator functions are done.\n\nI’m simplifying a bit, but that’s pretty much how Redux works. Read [my Redux post][5] for a better overview. But, you don’t need Redux to implement a simple pattern as described above. Oh, an by comparison Redux weighs practically nothing at approximately 2kb.\n\nThe point is, that **by leaning on React for DOM syncing we can dump a bunch of stuff**.\n\nImagine how much less code it takes, and how much less work is required of the browser to deal with a simple set of objects and arrays and a smart render call. \n\nAs opposed to shipping a class system, an event system, a templating system, a custom set of observables types, a DOM library like jQuery (required by some of them), all the extra app-specific code you’d write describing those models and collections and all their properties. Instantiating models and keeping all their internal state and caches those models use to enable their capabilities will require more memory and computation. The processing and memory required to do value comparisons (also known as “dirty-checking”) to see whether a `change` needs to be triggered.\n\nThere’s just **so many more layers of code that have to run even for simple changes to the state of the app**. \n\nThe ability to re-render *at will* allows for a fundamentally lighter approach.\n\nUnfortunately, I don’t have any perfect example I can just line up next to the Ember runtime performance test Atwood links to, but it’s not hard to imagine that all these simplifications that flat-out reduce the amount of computation required, would also have a very positive impact on runtime performance. \n\nAlso, to clarify, total file size may not matter so much as long as load time and runtime performance are still good. \n\n## So, what’s next?\n\nUnless we want the web to be seen as a second class citizen on mobile, I think we need to address these performance issues. I believe the web can be fast even on mediocre hardware while providing a good developer experience. BTW, if you doubt the developer experience part [watch Dan Abramov’s talk from React Europe][9].\n\nI certainly don’t have all the answers here and I’m not saying React + Redux is some kind of panacea. I just like what they enable.\n\nBut so far, pre-rendering all known HTML and using the lighter approaches described here seems to be working well for me. I’ll keep sharing my thoughts as I keep building more stuff. Please do the same.\n\nHit me up on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg) or better yet, write a response on your blog to continue the conversation. Go go gadget web!\n\n[1]: http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856\n[2]: https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889\n[3]: https://cldup.com/jjiqPZLLEK-2000x2000.png\n[4]: https://www.filamentgroup.com/lab/mv-initial-load-times.html\n[5]: https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux\n[6]: https://github.com/henrikjoreteg/hjs-webpack#developing-on-multiple-devices-at-once\n[7]: https://blog.andyet.com/2015/05/18/lazymorphic-apps-bringing-back-static-web\n[8]: https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components\n[9]: https://www.youtube.com/watch?v=xsSnOQynTHs","outputFile":"/blog/viability-of-js-frameworks-on-mobile.html","html":"<p>Whether I like it or not, not everyone using my web apps will be running iOS 9 on an iPhone 6S or a Nexus 6P and connecting via super-speedy wifi.</p><p>The reality is often anything but that. 3G connections and older hardware is often the norm. Google reports that there are <a href=http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856>1.4 billion active Android users</a>. Many of them, will no doubt, be running less-than-top-of-the-line hardware.</p><p>And, if you read stuff like <a href=https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889>Jeff Atwood’s recent post</a> on Android performance you may feel that things are pretty bleak for the mobile web.</p><p>A few notable pull quotes from that post:</p><blockquote><p>In a nutshell, the fastest known Android device available today -- and there are millions of Android devices much slower than that out there -- performs 5× slower than a new iPhone 6s, and a little worse than a 2012 era iPhone 5 in Ember. How depressing.</p><p>We&#39;ve done enough research to know this issue is not really specific to Ember, but also affects Angular and <strong>most other heavy/complex JavaScript on Android</strong>. Why?</p></blockquote><p>Perhaps the “heavy/complex” part is the problem?</p><p>Continuing…</p><blockquote><p>This is becoming more and more of a systemic problem in the Android ecosystem, one that will not go away in the next few years, and it may affect the future of Discourse, since we bet heavily on near-desktop JavaScript performance on mobile devices. That is clearly happening on iOS but it is quite disastrously the opposite on Android.</p></blockquote><p>Ok, there’s the state of the mobile web ecosystem, per Atwood.</p><p>He ends with this line:</p><blockquote><p>I am no longer optimistic this will change in the next two years, and there are untold millions of slow Android devices out there, so we need to start considering alternatives for the Discourse project.</p></blockquote><p>Bummer, right?! Let’s all go home. At least there’s React Native so we can all pretend we’re building web apps while actually writing native apps ;)</p><p>So, is the mobile web a dead-end for apps?</p><a name=hang-on-a-minute class=anchor href=#hang-on-a-minute><h2><span class=header-link></span>Hang on a minute…</h2></a><p>If you didn’t catch it. The “Discourse” app Atwood is referring to is the app he used to publish the post <em>about</em> Discourse. It’s a forum app of sorts. So meta!</p><p>Anyway, when I realized this, I open the network panel of dev tools on that Discourse page and there was 659kb of JS transferred across the wire (that’s the gzipped size).</p><p>In my opinion, that’s the same as forfeiting on mobile before you even start.</p><p>I think we <em>have</em> to do better than this to be viable on mobile.</p><p>I’m not blaming or even trying to criticize Atwood or Discourse here. A huge number of mobile web apps are built this way so this could really have been <em>any number</em> of sites.</p><p>My question is simply: are all these heavier tools/frameworks even viable for mobile use?</p><p>I’m not convinced they all are.</p><a name=lets-look-at-some-research class=anchor href=#lets-look-at-some-research><h2><span class=header-link></span>Let’s look at some research</h2></a><p>The fine folks at The Filament Group <a href=https://www.filamentgroup.com/lab/mv-initial-load-times.html>published some research last December</a> about load time performance of the TodoMVC app of 5 popular web frameworks. Obviously, TodoMVC is a bit of a contrived example and may not be indicative of a real-world app. But, it’s a great fit for this type of research because it will include all the base assets for a given framework, and at least hopefully, the best practices as well.</p><p>You may be thinking: <em>”this is load time performance, Atwood was talking about runtime performance!”</em></p><p>Yes, Atwood was discussing runtime performance, I’ll get to that shortly. <em>But, the user doesn’t care why they’re waiting</em>, so load time is clearly an important part of performance too.</p><p>The whole post is worth reading, but the summary of the research findings can be seen in their graphs:</p><p><img src=https://cldup.com/jjiqPZLLEK-2000x2000.png alt=\"load time screenshots\"></p><p>In my opinion, the data for Angular and Ember (the two options that Atwood mentioned) flat out disqualify them for mobile use.</p><p>If you know that I co-created Ampersand you may assume that I’m flaming against other frameworks and trying to sell you on Ampersand.</p><p>Nope.</p><p>The last two apps I built actually didn’t contain any Ampersand code at all. If you’ve read my <a href=https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux>recent, excited post about Redux</a> that probably doesn’t surprise you.</p><p><strong>I don’t care what you use, beyond how it affects how I experience your app as a user.</strong></p><p>Tools are merely a means to an end.</p><p>Ok, I lied. I do <em>sort of</em> care what you pick. But, only because I don’t want your experiences as a developer lead you to think the mobile web isn’t viable just because sending a megabyte of JS made the app slow.</p><a name=its-not-game-over class=anchor href=#its-not-game-over><h2><span class=header-link></span>It’s not game over</h2></a><p>Maybe the mobile web is fast enough and we just need to stop pretending we can get away with ineffeciencies that we don’t feel on a desktop.</p><p>I think we need to be much more minimalist from the start.</p><p>The ever brilliant Dominic Tarr once said this:</p><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>if you want to write fast software, use a slow computer</p>&mdash; Dominic Tarr (@dominictarr) <a href=https://twitter.com/dominictarr/status/629992939738005504>August 8, 2015</a></blockquote><p>How many web developers, to this day, don’t test on a phone locally when building apps? This isn’t just about small screens, we need to assume that we’re building for weaker, slower computers. I think we need to bake mobile into our dev workflow, not just as some final pre-launch check. If you’re curious, I <a href=https://github.com/henrikjoreteg/hjs-webpack#developing-on-multiple-devices-at-once>use this setup</a> while developing.</p><p>Regardless, even though phones may continue to get faster and faster, I think it’s myopic to assume we can just ignore current speed problems in hopes that they’ll be resolved by faster hardware. Although, phones may continue to improve, I don’t think phones should be our only runtime target.</p><p>As this whole Internet of Things, um… thing becomes more of a thing (wow, that sentence was epically terrible #leavingitanyway). It seems likely there will be a some other platforms we’ll want to write for that are <em>not</em> phones. Things like watches, TVs, VR, and small computers hooked to to large displays.</p><a name=thats-nice-henrik-so-what-do-you-propose-we-do class=anchor href=#thats-nice-henrik-so-what-do-you-propose-we-do><h2><span class=header-link></span>That’s nice, Henrik. So what do you propose we do?</h2></a><p>First, as <a href=https://blog.andyet.com/2015/05/18/lazymorphic-apps-bringing-back-static-web>I’ve written before</a>, I think all the HTML we can infer from the URL alone should be rendered at build time to static HTML files. As it turns out, browsers, even “slow” mobile ones are pretty friggin’ fast at rendering HTML sent from the server.</p><p>Secondly, I think we need to do more with less, let me explain…</p><p>Much of the hoop-jumping in Backbone, Ampersand, Ember, and Angular have to do with properly binding state to the UI. They certainly do more than that, but even many of the data features, on closer inspection have to do with supporting those binding capabilities. As a result, they all ship with an event system of some kind, and most have a way to create derived/calculated properties that can also be observed.</p><p>You can certainly use React as a view layer for any of those, but one of the big wins with React is that at the point where you can do a cheap re-render it removes the need for many of those other features that add complexity to your system.</p><p>As a simple example, if you’ve got a <code>Backbone.Collection</code> with models in it, how do you go about rendering the length of that collection to the UI using Backbone paradigms? Getting the value in the template initially is certainly easy if you know it at the point when it’s first rendered. But, how do you bind that value so that any change in the collection will also update that length that you’ve rendered into the DOM?</p><p>You could set it up to re-render on all add/remove/change events or, you could create an observable property somewhere that did the same and then track that as you would any other property. That total would be updated with any changes, and then, you’d bind it to the view.</p><p>But all this feels a bit silly. If you’ve ever inspected an instance of a <code>Backbone.Collection</code> you know that <code>collection.models</code> is simply an array of <code>Backbone.Model</code>’s. An Array already <em>has</em> a value for length, it’s called <code>.length</code> **sigh**!</p><p>Contrast that to React or anything else that allows us to inexpensively re-render our whole app at will (the promise of React). When we have that, we can just use that <code>length</code> property directly in our <code>render</code> method in the individual component that cares about it. Now whenever we have any change in any of the state in our app we re-render.</p><p>So now it becomes this simple:</p><pre><code class=undefinedjs>React.createClass({\n  render: function () {\n      return &lt;span&gt;{this.props.species.length}&lt;/span&gt;\n  }\n})\n</code></pre><p>Or, if using the <a href=https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components>new stateless functional components</a> in React 0.14, with ES6 destructuring, and assuming <code>species</code> is our array of objects here it gets downright beautiful. The entire component could be written as:</p><pre><code class=undefinedjs>var Aquarium = ({species}) =&gt; (\n  &lt;span&gt;{species.length}&lt;/span&gt;\n);\n</code></pre><p>Aesthetics aside, just think how much less stuff we need:</p><ol><li>We no longer need to register multiple event listeners on the collection (less code, less memory use).</li><li>We no longer need to define another property that we have to compute that creates an observable duplicate of what we already have with <code>.length</code> (less code, less memory).</li><li>Shoot, we may not even need the collection or any of its models to be observable at all! The collection could be a plain ‘ol JavaScript array containing plain ‘ol JavaScript objects instead of custom created observable models (a lot less code, less memory, less computation)</li></ol><p><strong>We no longer need many of the features in those heavy frameworks at all.</strong></p><p>React then becomes the biggest pill you have to swallow. In my simple tests with React, and React-DOM 0.14, built with webpack and gzipped you end up around 37kb.</p><p>For comparison, jQuery 2.x weighs in at about 29kb min+gzip. So, really, we’re doing pretty good and my hope would be that eventually, much like happened with jQuery, many of the core features of React would simply be part of browser API.</p><p>Anyway, now rather than needing observable models, observable collections, the ability to subscribe to changes on derived properties and all that jazz, we can probably get away with an architecture that works more like this:</p><ol><li>A single application state object as a JSON-like structure of plain JS arrays and objects.</li><li>A set of mutator functions that represent all the ways that state can be changed to be used any time there needs to be a change in the state tree (you could follow immutability principles here too, if you’d like and just make sure you replace anything you change).</li><li>Re-render the whole app any time these mutator functions are done.</li></ol><p>I’m simplifying a bit, but that’s pretty much how Redux works. Read <a href=https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux>my Redux post</a> for a better overview. But, you don’t need Redux to implement a simple pattern as described above. Oh, an by comparison Redux weighs practically nothing at approximately 2kb.</p><p>The point is, that <strong>by leaning on React for DOM syncing we can dump a bunch of stuff</strong>.</p><p>Imagine how much less code it takes, and how much less work is required of the browser to deal with a simple set of objects and arrays and a smart render call.</p><p>As opposed to shipping a class system, an event system, a templating system, a custom set of observables types, a DOM library like jQuery (required by some of them), all the extra app-specific code you’d write describing those models and collections and all their properties. Instantiating models and keeping all their internal state and caches those models use to enable their capabilities will require more memory and computation. The processing and memory required to do value comparisons (also known as “dirty-checking”) to see whether a <code>change</code> needs to be triggered.</p><p>There’s just <strong>so many more layers of code that have to run even for simple changes to the state of the app</strong>.</p><p>The ability to re-render <em>at will</em> allows for a fundamentally lighter approach.</p><p>Unfortunately, I don’t have any perfect example I can just line up next to the Ember runtime performance test Atwood links to, but it’s not hard to imagine that all these simplifications that flat-out reduce the amount of computation required, would also have a very positive impact on runtime performance.</p><p>Also, to clarify, total file size may not matter so much as long as load time and runtime performance are still good.</p><a name=so-whats-next class=anchor href=#so-whats-next><h2><span class=header-link></span>So, what’s next?</h2></a><p>Unless we want the web to be seen as a second class citizen on mobile, I think we need to address these performance issues. I believe the web can be fast even on mediocre hardware while providing a good developer experience. BTW, if you doubt the developer experience part <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">watch Dan Abramov’s talk from React Europe</a>.</p><p>I certainly don’t have all the answers here and I’m not saying React + Redux is some kind of panacea. I just like what they enable.</p><p>But so far, pre-rendering all known HTML and using the lighter approaches described here seems to be working well for me. I’ll keep sharing my thoughts as I keep building more stuff. Please do the same.</p><p>Hit me up on twitter: <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> or better yet, write a response on your blog to continue the conversation. Go go gadget web!</p>","preview":"<p>Whether I like it or not, not everyone using my web apps will be running iOS 9 on an iPhone 6S or a Nexus 6P and connecting via super-speedy wifi.</p><p>The reality is often anything but that. 3G connections and older hardware is often the norm. Google reports that there are <a href=http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856>1.4 billion active Android users</a>. Many of them, will no doubt, be running less-than-top-of-the-line hardware.</p>"},{"slug":"reactive-programming","date":"2015-09-28T04:01:06.000Z","title":"Reactive Programming","old_url":"http://joreteg.com/post/130039101027/reactive-programming","tags":"programming","url":"/blog/reactive-programming","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/10/reactive-programming.md","markdown":"The term “reactive programming” may sound a bit cryptic, but if you’ve ever used a spreadsheet, you’re already quite familiar with the concept.\n\nWhen you’re simply *viewing* a spreadsheet, each cell isn’t necessarily showing you what was actually typed into the cell. Sure, some cells may contain simple values, but others actually contain *formulas*. \n\nThe formula may, for example, describe that the cell should contain the sum of cells `A2` and `B2`. But, when you’re viewing it you’ll see the computed value, not the formula itself.\n\nThe real power of a spreadsheet comes from the fact that when you reference another cell from one formula the referenced cell could either contain a simple value *or another formula*. Any changes made to the inputs will flow through the entire spreadsheet. Each cell gets recomputed anytime any of its inputs change until the entire sheet is reflecting the changes that have cascaded through those formulas.\n\nWhat I’ve been describing with the spreadsheet is in fact **reactive programming**. Each cell is simply reacting to changes in the inputs.\n\nThat’s the key distinction: instead of writing code that calculates simple values, *we write code that describes relationships between sources of values*. \n\nOnce we’ve described how everything should react to the changes to its inputs, then the data flows through our functions until all the new values have been computed.\n\n## So, why would we want to build things that way? What does it gain us? \n\nWell, let’s think of the alternative:\n\nIf you have a table of values that you want to total up, you could certainly pull out a calculator, add them all up, and type the resulting value into the “Total” cell. \n\nDone! Easy.\n\nBut, now what happens when the values change? Obviously, you’d have to repeat the exercise. This may be tolerable for a small table, but it would quickly become completely unmanageable if you’re dealing with, say, an amortization table showing 30 years of monthly principal and interest payments. Managing changing inputs in that type of system requires a difference paradigm.\n\n## Let’s give a more specific example. \n\nLet’s say you want to build a mobile web app that is going to let people sort a list by touching and holding an item or swipe an item right and left to perform different actions on it.\n\nA browser gives us four different “touch” events we can listen for: \n\n1. `touchstart`\n2. `touchmove`\n3. `touched`\n4. `touchcancel`\n\nWhere’s my `touchhold` event?! There’s no such thing. So if we want to build an app that triggers “sort mode” when a user has held their finger on an item for a half second. Think about what we’d have to do:\n\n1. Listen for a `touchstart`\n2. start a timer\n3. wait half a second\n\nDoesn’t sound too bad right? But wait… we also have to make sure they haven’t moved their finger too far, but we should probably still consider it a hold if they’ve moved just a few pixels. We also have to make sure we stop the timer if we get a `touchend`.\n\nSo, now we have to also store starting position we have to compare that position with any subsequent `touchmove` events we have to continually calculate a distance moved from that starting point with any changes. As long as that distance is within our tolerance and the timer reaches half second before any `touchend` event… congrats, we have a “hold”. \n\nIf we think about it, this is really spreadsheet-type problem, right?\n\nWe’ve got some input cells that are simple values, some of which will be updated over time:\n\n1. starting X\n2. starting Y \n3. start time\n3. current X \n4. current Y\n5. current time\n\nWe’ve got formula cells that will calculate as the time passes and inputs change:\n\n1. time elapsed\n2. distance moved\n\nWe’ve got an `is holding` formula cell that uses the values from `time elapsed` and `distance moved`.\n\nUltimately, all this touch-related logic could be broken out into its own library. Then, our program would only have to care about that `is holding` cell and update the interface accordingly. All the complexity of how those touches are tracked and measured would be contained within the library.\n\nThis is just one example of types of issues reactive programming approaches help us deal with.\n\nOver time, you’ll find that much of the code we write is really just tracking and updating relationships between different variables. \n\nRecognizing that and learning to use reactive patterns allows us to more easily solve complex problems and break them down into small, manageable pieces. \n\nThen, just let the data flow.\n\n---\n*Note: I was asked to produce a writing sample explaining reactive programming for a technical writing contract. I'm posting it here because I thought it may be useful to someone (and yes, I \"passed\").*\n\nIf you like this, or if you think I botched it, please let me know on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg)","outputFile":"/blog/reactive-programming.html","html":"<p>The term “reactive programming” may sound a bit cryptic, but if you’ve ever used a spreadsheet, you’re already quite familiar with the concept.</p><p>When you’re simply <em>viewing</em> a spreadsheet, each cell isn’t necessarily showing you what was actually typed into the cell. Sure, some cells may contain simple values, but others actually contain <em>formulas</em>.</p><p>The formula may, for example, describe that the cell should contain the sum of cells <code>A2</code> and <code>B2</code>. But, when you’re viewing it you’ll see the computed value, not the formula itself.</p><p>The real power of a spreadsheet comes from the fact that when you reference another cell from one formula the referenced cell could either contain a simple value <em>or another formula</em>. Any changes made to the inputs will flow through the entire spreadsheet. Each cell gets recomputed anytime any of its inputs change until the entire sheet is reflecting the changes that have cascaded through those formulas.</p><p>What I’ve been describing with the spreadsheet is in fact <strong>reactive programming</strong>. Each cell is simply reacting to changes in the inputs.</p><p>That’s the key distinction: instead of writing code that calculates simple values, <em>we write code that describes relationships between sources of values</em>.</p><p>Once we’ve described how everything should react to the changes to its inputs, then the data flows through our functions until all the new values have been computed.</p><a name=so-why-would-we-want-to-build-things-that-way-what-does-it-gain-us class=anchor href=#so-why-would-we-want-to-build-things-that-way-what-does-it-gain-us><h2><span class=header-link></span>So, why would we want to build things that way? What does it gain us?</h2></a><p>Well, let’s think of the alternative:</p><p>If you have a table of values that you want to total up, you could certainly pull out a calculator, add them all up, and type the resulting value into the “Total” cell.</p><p>Done! Easy.</p><p>But, now what happens when the values change? Obviously, you’d have to repeat the exercise. This may be tolerable for a small table, but it would quickly become completely unmanageable if you’re dealing with, say, an amortization table showing 30 years of monthly principal and interest payments. Managing changing inputs in that type of system requires a difference paradigm.</p><a name=lets-give-a-more-specific-example class=anchor href=#lets-give-a-more-specific-example><h2><span class=header-link></span>Let’s give a more specific example.</h2></a><p>Let’s say you want to build a mobile web app that is going to let people sort a list by touching and holding an item or swipe an item right and left to perform different actions on it.</p><p>A browser gives us four different “touch” events we can listen for:</p><ol><li><code>touchstart</code></li><li><code>touchmove</code></li><li><code>touched</code></li><li><code>touchcancel</code></li></ol><p>Where’s my <code>touchhold</code> event?! There’s no such thing. So if we want to build an app that triggers “sort mode” when a user has held their finger on an item for a half second. Think about what we’d have to do:</p><ol><li>Listen for a <code>touchstart</code></li><li>start a timer</li><li>wait half a second</li></ol><p>Doesn’t sound too bad right? But wait… we also have to make sure they haven’t moved their finger too far, but we should probably still consider it a hold if they’ve moved just a few pixels. We also have to make sure we stop the timer if we get a <code>touchend</code>.</p><p>So, now we have to also store starting position we have to compare that position with any subsequent <code>touchmove</code> events we have to continually calculate a distance moved from that starting point with any changes. As long as that distance is within our tolerance and the timer reaches half second before any <code>touchend</code> event… congrats, we have a “hold”.</p><p>If we think about it, this is really spreadsheet-type problem, right?</p><p>We’ve got some input cells that are simple values, some of which will be updated over time:</p><ol><li>starting X</li><li>starting Y</li><li>start time</li><li>current X</li><li>current Y</li><li>current time</li></ol><p>We’ve got formula cells that will calculate as the time passes and inputs change:</p><ol><li>time elapsed</li><li>distance moved</li></ol><p>We’ve got an <code>is holding</code> formula cell that uses the values from <code>time elapsed</code> and <code>distance moved</code>.</p><p>Ultimately, all this touch-related logic could be broken out into its own library. Then, our program would only have to care about that <code>is holding</code> cell and update the interface accordingly. All the complexity of how those touches are tracked and measured would be contained within the library.</p><p>This is just one example of types of issues reactive programming approaches help us deal with.</p><p>Over time, you’ll find that much of the code we write is really just tracking and updating relationships between different variables.</p><p>Recognizing that and learning to use reactive patterns allows us to more easily solve complex problems and break them down into small, manageable pieces.</p><p>Then, just let the data flow.</p><hr><p><em>Note: I was asked to produce a writing sample explaining reactive programming for a technical writing contract. I&#39;m posting it here because I thought it may be useful to someone (and yes, I &quot;passed&quot;).</em></p><p>If you like this, or if you think I botched it, please let me know on twitter: <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a></p>","preview":"<p>The term “reactive programming” may sound a bit cryptic, but if you’ve ever used a spreadsheet, you’re already quite familiar with the concept.</p><p>When you’re simply <em>viewing</em> a spreadsheet, each cell isn’t necessarily showing you what was actually typed into the cell. Sure, some cells may contain simple values, but others actually contain <em>formulas</em>.</p>"},{"slug":"the-next-adventure-awaits","type":"text","date":"2015-08-18T17:40:00.000Z","title":"The next adventure awaits","old_url":"http://joreteg.com/post/127007507032/the-next-adventure-awaits","scripts":["//platform.twitter.com/widgets.js"],"url":"/blog/the-next-adventure-awaits","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/08/the-next-adventure-awaits.html","markdown":"<p>It’s official, next Monday (Aug 24, 2015) my five and a half year tenure at <a href=\"http://andyet.com/\">&amp;yet</a> is over (Gulp!).</p>\n\n<h2>What’s wrong? What happened?!</h2>\n\n<p>Nothing. Seriously. It’s just been five and a half years and it feels like its time for new adventures.</p>\n\n<p>Things are and will continue to be great at &amp;yet, with lots of interesting clients, lots of <a href=\"http://andyetconf.com/\">cool stuff coming up</a> and I will always <em>highly</em> recommend them as a consulting company.</p>\n\n<p>I’ve had an amazing time at &amp;yet and have very ambivalent feelings about quitting because I &lt;3 my teammates and we’ve had some <a href=\"https://blog.andyet.com/2011/03/03/devcastle\">incredible</a>, <a href=\"https://medium.com/the-art-of-experience/arrival-d47000091355\">experiences</a> together that are nothing short of priceless.</p>\n\n<p>But sometimes you’ve gotta take a leap and follow your gut.</p>\n\n<h2>So what’s next?</h2>\n\n<p>In the short term, I’m available for independent consulting.</p>\n\n<p>I’ve set up <a href=\"http://consulting.joreteg.com/\">a simple page</a> explaining the types of projects I can help with as well as my rates and availability.</p>\n\n<p>In short, I’m available to start a new project on September 14.</p>\n\n<p>If you have a project you want to talk to me about, <a href=\"http://consulting.joreteg.com/\">read that short consulting page</a> then shoot me an email: <a href=\"mailto:henrik@joreteg.com\">henrik@joreteg.com</a>.</p>\n\n<h2>What about the long term?</h2>\n\n<p>If you know me, you know I’ve always got a few things in the hopper. For one, there’s this:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">I think I may have accidentally started writing another book.</p>\n\n<p>— Henrik Joreteg (@HenrikJoreteg) <a href=\"https://twitter.com/HenrikJoreteg/status/632802841694834689\">August 16, 2015</a></p></blockquote>\n\n<p>Additionally, this hints at another, still somewhat vague idea I’ve started working on:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">The day will come when a major paid SaaS ships without writing or deploying their own backend.</p>— Henrik Joreteg (@HenrikJoreteg) <a href=\"https://twitter.com/HenrikJoreteg/status/633099515361267713\">August 17, 2015</a></blockquote>\n\n<p>More on all that in the future. Till next post… see ya on the interwebz. Questions? <a href=\"mailto:henrik@joreteg.com\">Email me</a> or ping me, <a href=\"http://twitter.com/henrikjoreteg\">@HenrikJoreteg</a> on twitter.</p>","outputFile":"/blog/the-next-adventure-awaits.html","html":"<p>It’s official, next Monday (Aug 24, 2015) my five and a half year tenure at <a href=\"http://andyet.com/\">&amp;yet</a> is over (Gulp!).</p><h2>What’s wrong? What happened?!</h2><p>Nothing. Seriously. It’s just been five and a half years and it feels like its time for new adventures.</p><p>Things are and will continue to be great at &amp;yet, with lots of interesting clients, lots of <a href=\"http://andyetconf.com/\">cool stuff coming up</a> and I will always <em>highly</em> recommend them as a consulting company.</p><p>I’ve had an amazing time at &amp;yet and have very ambivalent feelings about quitting because I &lt;3 my teammates and we’ve had some <a href=https://blog.andyet.com/2011/03/03/devcastle>incredible</a>, <a href=https://medium.com/the-art-of-experience/arrival-d47000091355>experiences</a> together that are nothing short of priceless.</p><p>But sometimes you’ve gotta take a leap and follow your gut.</p><h2>So what’s next?</h2><p>In the short term, I’m available for independent consulting.</p><p>I’ve set up <a href=\"http://consulting.joreteg.com/\">a simple page</a> explaining the types of projects I can help with as well as my rates and availability.</p><p>In short, I’m available to start a new project on September 14.</p><p>If you have a project you want to talk to me about, <a href=\"http://consulting.joreteg.com/\">read that short consulting page</a> then shoot me an email: <a href=mailto:henrik@joreteg.com>henrik@joreteg.com</a>.</p><h2>What about the long term?</h2><p>If you know me, you know I’ve always got a few things in the hopper. For one, there’s this:</p><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>I think I may have accidentally started writing another book.</p><p>— Henrik Joreteg (@HenrikJoreteg) <a href=https://twitter.com/HenrikJoreteg/status/632802841694834689>August 16, 2015</a></p></blockquote><p>Additionally, this hints at another, still somewhat vague idea I’ve started working on:</p><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>The day will come when a major paid SaaS ships without writing or deploying their own backend.</p>— Henrik Joreteg (@HenrikJoreteg) <a href=https://twitter.com/HenrikJoreteg/status/633099515361267713>August 17, 2015</a></blockquote><p>More on all that in the future. Till next post… see ya on the interwebz. Questions? <a href=mailto:henrik@joreteg.com>Email me</a> or ping me, <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on twitter.</p>","preview":"<p>It’s official, next Monday (Aug 24, 2015) my five and a half year tenure at <a href=\"http://andyet.com/\">&amp;yet</a> is over (Gulp!).</p><h2>What’s wrong? What happened?!</h2><p>Nothing. Seriously. It’s just been five and a half years and it feels like its time for new adventures.</p><p>Things are and will continue to be great at &amp;yet, with lots of interesting clients, lots of <a href=\"http://andyetconf.com/\">cool stuff coming up</a> and I will always <em>highly</em> recommend them as a consulting company.</p>"},{"slug":"a-tech-industry-conversation","type":"text","date":"2015-06-27T06:20:50.000Z","title":"a tech industry conversation","old_url":"http://joreteg.com/post/122571550837/a-tech-industry-conversation","url":"/blog/a-tech-industry-conversation","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/06/a-tech-industry-conversation.html","markdown":"<p>What follows is an actual SMS conversation I had this evening with Marc Grabanski (with only a few minor edits).</p>\n\n<hr><p><strong>Marc</strong></p>\n\n<p>Now we can finally write GWT natively and get the performance</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Greater Web Together™. It&rsquo;s finally living up to its name.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>RxJS is basically making Objective C into Swift that runs in the browser it&rsquo;s great</p>\n\n<p>Imagine a bootstrap that runs Ruby &ndash; mind blowing npm packages made easy</p>\n\n<p>Install them all with a single gulp request &ndash; everything HTTP2 is faster than Python in web storm</p>\n\n<p>Never again will we need flash!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I heard they&rsquo;re replacing event emitter in node with event machine.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Thanks to Dart VM</p>\n\n<p>WebGL is like WebRTC running through twisted &ndash; I mean how else are we going to take ES 2016 to the next level?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, Dart is the VM that will change the world of evented ColdFusion in a way Flash arduinos never could.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Simple.</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>It&rsquo;s like raspberry pi but with websocket support out of the box. Without the ant build configs.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh holy crap ya arduinos are going to change the DEV tools like crazy! Makes them run multi lingual APIs under water.</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Meteor is all over that shit</p>\n\n<p>totes</p>\n\n<p>I couldn&rsquo;t believe it, they&rsquo;re inlining react code natively now too.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Well meteor makes it easy to steal lots of credit cards with elastic search based WebKit.</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, but even if you skip meteor I can emulate that with a compromised JSON.stringify method in like 4 nanoseconds.</p>\n\n<p>Just open devtools on the devtools in chrome and run mini mongo and its like getting root at the pentagon. But totally realtime.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Exactly</p>\n\n<p>Buy that stuff with TOR coins</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>That&rsquo;s why I only use tor on cat3 cables</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Lol TOR exactly</p>\n\n<p>Never in wifi or else you get massive Unit Tests</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>It&rsquo;s like Silk Road without all the guppies. It&rsquo;s the rebirth of 1337 all over</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Never want to unit test your wifi on Android or else you get super cooled byte code</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Just run it on OpenSauce. Then turn their test machines into a new self-spawning botnet</p>\n\n<p>Game over</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Game overs\n  😎</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Some Russian hacker did that. I think she was 3 at the time.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Thrash was her name</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>😆</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Very good at writing killer Visual Basic</p>\n\n<p>I&rsquo;ve never seen VB look so much like Cobal in my life wow</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah the hackathon didn&rsquo;t know what hit it.</p>\n\n<p>Heard she wrote it in binary first then wrote some source code as documentation.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Amazing stuff. could crack a DOM API wide open and turn it into Luna</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>The GPU nearly caught fire too.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>GPU was storing way too much SQL though</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Luna!?! Oh shit. You didn&rsquo;t just say that in a text? The Facebook ex-something is totally in Asana getting notifications of these texts right now.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Replicated recursive functions across Ruby shards</p>\n\n<p>Never before have I seen so many manifest files</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I totally base64 and dynamically salt my SQL <em>before</em> it goes into the GPU. That way it&rsquo;s thread safe.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Had to compile Ubuntu into Postgres</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Most people only do it before its stores on SSDs with Flux</p>\n\n<p>True, that&rsquo;s a must</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Bash files all over Redux it was a mess</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Cloudfront deals with that for me though</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Nice</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Keeps it DRY, ya know?!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>I keep VIM DRY as possible</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, also helps if you keep your JSON object oriented. Gang of Four FTW</p>\n\n<p><strong>Marc</strong></p>\n\n<p>58 key commands Into the module pattern</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I wrote that book</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Only two people with 10 years of living on the web could possibly hack this event loop</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>that’s brave in a world of GIF streaming and dynamic favicons</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Living on the web writing NES emulators that is</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>only if they’re embedding linux</p>\n\n<p>how else would you control all those drones?</p>\n\n<p>use proto buffers?!</p>\n\n<p>raf loops! good call</p>\n\n<p><strong>Marc</strong></p>\n\n<p>No way</p>\n\n<p>Did you write the book in Go?</p>\n\n<p>I hear Go is like cucumber tests</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Well it was based on open source encryption, so it was partially written. Then npm said they&rsquo;re going public, which ruined those tests.\n  &hellip;and my book with &lsquo;em</p>\n\n<p><strong>Marc</strong></p>\n\n<p>YC doesn&rsquo;t like when you write their books in Go</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I did a series D first, so they didn&rsquo;t mind</p>\n\n<p>Plus, I take dogecoin</p>\n\n<p>So it works out</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh wow I&rsquo;ve never had a series D</p>\n\n<p>I&rsquo;m only on my 5th SSH tunnel</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Well you already made yours, if you know what I mean.</p>\n\n<p>Remember BOSH?!?</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Is that like caniuse ?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Kinda, yeah. I installed a Tesla house battery as a backup for my Triple RAIDed thumb drives.</p>\n\n<p>Problem? Solved.</p>\n\n<p>Bam!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Wow!</p>\n\n<p>You must be printing horse js coins like crazy</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I don&rsquo;t wanna brag. But I&rsquo;m like notch, but I bought a <em>real</em> house.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>The internet of things</p>\n\n<p>Of things you buy with apply pay</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I hired Snoop Dogg to help me install the 3D printed travertine floor tiles.</p>\n\n<p>Of course purchased with Apple Pay</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Awesome was the 3D printer on spotify?</p>\n\n<p>I hear there is a SaaS z-index you can lookup on MDN</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Rdio, but it used flash for a while so, that faded</p>\n\n<p>You just have to use Basic auth and then change the font color so it no longer blends with the background.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Did you make a DSL for that?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Naw, but i run a grease monkey script though. Then you don&rsquo;t have to think about it.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>It just connects with Bluetooth getUserMedia, I see</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I metaprogrammed the grease monkey script while deploying chaos monkey on Google+ data centers.</p>\n\n<p>Yeah</p>\n\n<p><strong>Marc</strong></p>\n\n<p>That must have been crazy</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>It was a bit wild, but I was asleep when I wrote it</p>\n\n<p><strong>Marc</strong></p>\n\n<p>No one ever knew that jQuery had a method to detect heartbeat from a Perl script</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I know!! It&rsquo;s right there!!</p>\n\n<p>Uber uses it</p>\n\n<p>I&rsquo;m gonna go run a speed test on my gigabit apple car.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>You can see the data in your apple health app it&rsquo;s all built on CLI algorithms</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>True, it&rsquo;ll be keynoted tomorrow anyway.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>XML RPC is the rage</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Especially on Google Glass</p>\n\n<p>It&rsquo;s like FirePhone but cooler</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Ya but the Apple TV is so far ahead because it&rsquo;s on Firebase</p>\n\n<p>Twilio never saw Native script coming</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I heard rumors from watching Silicon Valley that they&rsquo;re thinking about switching to Parse, <em>because</em> of Native Script in Typescript</p>\n\n<p>Just be sure to run it in strict mode or it&rsquo;s like http 1.0 all over again.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Ya that&rsquo;s a real problem with cyclomatic complexity in your semi colons</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>yup, I was getting teapotted with 418s all day before I switched to semi-standard</p>\n\n<p>Just add a grunt task though.</p>\n\n<p>But only if you&rsquo;re on bower</p>\n\n<p><strong>Marc</strong></p>\n\n<p>No kidding</p>\n\n<p>I always though nHibrinate was the solution for katas</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I think you&rsquo;re right</p>\n\n<p>Saw that on my kanban</p>\n\n<p><strong>Marc</strong></p>\n\n<p>On run keeper?</p>\n\n<p>I prefer basecamp over fresh books</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I use SPF records whenever I run though.</p>\n\n<p>I have sensitive skin according to my apple watch</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh ya the A records really helps when you call a Lyft to get your AirBNB</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Just point a CNAME to gh-pages first, but I totally agree</p>\n\n<p>Jobs and Woz used to always talk about that.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Are those thread safe VR goggles going to crash google hangouts?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>No one listened though, they were so far ahead like Alan Kay, but with the Newton.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Elixir is kind of like gigabit 4G through Fiddler</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I think they might, they&rsquo;re bastardizing the WebRTC peer connections to stream Internet to the Loon project.</p>\n\n<p>It&rsquo;s so non-standard</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh ya like Ionic framework&rsquo;s ACID test</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>That was a game changer.</p>\n\n<p>Just like apple&rsquo;s ear pods</p>\n\n<p>I ran those natively!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>I TDD my beats headphones natively ya - for performance of course</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, it&rsquo;d be like doing BDD if you didn&rsquo;t. This isn&rsquo;t English! It&rsquo;s programming!!</p>\n\n<p>I&rsquo;m gonna reimplement web components for telnet</p>\n\n<p>But without HTML imports, of course</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Make sure you use component JS on Octopress because otherwise people will steal your SSH keys</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>With no babel though</p>\n\n<p>Or else you&rsquo;ll get ES2014</p>\n\n<p><strong>Marc</strong></p>\n\n<p>VPN into webpack first</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>IT&rsquo;S SO EASY TO DO THIS. I COULD WRITE THESE FOR THREE DAYS STRAIGHT! it&rsquo;s unbelievable.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Run a kickstarter for it!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Kerberos auth to kickstarter, but I&rsquo;ll find my kickstarter video through an incubator I just funded on indiegogo.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Build a rapid prototype protocol</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I might just use DDP</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Into CouchDB</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>or&hellip; UDP!</p>\n\n<p>I just need about half the packet-loss and I&rsquo;ll get funded.</p>\n\n<p>That&rsquo;s what Theil told me</p>\n\n<p><strong>Marc</strong></p>\n\n<p>I hear UDP handshakes better than SSL through a CDN</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Good point</p>\n\n<p>yahoo wants in too.</p>\n\n<p>They killed Pipes!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Just like Google killed reader</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Beacon API is always better for calling home with. Otherwise AWS never gets the event data</p>\n\n<p>&ldquo;OK Google&rdquo; amirite?!?</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Isn&rsquo;t that GraphQL Siri on a XSS CORS call?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Think so. But use movable type</p>\n\n<p>Or it KILLS your wifi</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Movable type is built on Functional reactive Pure Script so it&rsquo;s pretty much Ghost</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>With JSP templates, but yeah.</p>\n\n<p>LaTeX is just better anyway</p>\n\n<p>Especially if you use D3 to render it</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Like a mongo elastic search!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I think I&rsquo;d run that as a docker container</p>\n\n<p><strong>Marc</strong></p>\n\n<p>On a Hadoop prerendered iframe</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>But behind nginx</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Never before have I seen so many processors running varnish</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Deploy it with ServiceWorker though. Or you may violate the CSP.</p>\n\n<p>Unless it&rsquo;s MIT licensed.</p>\n\n<p>Varnish is great.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>They were spinning up so many Apache instances that the load balancers couldn&rsquo;t stand it except for in Google Gears running in Unity</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I just wrote an Object tag yesterday that did that but using Iced CoffeeScript so Eich would digg it on HN.</p>\n\n<p>He re-tweeted me on pownce the other day.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Distributed go pros are all the stack overflow credit</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Stream it with EventSource</p>\n\n<p>It&rsquo;s way more reliable that flash media server</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Git tipped on underscore</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Don&rsquo;t go all TechCrunch Disrupt on me.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Crockford and Eich designed it though</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Crowd funded hackathons?</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Together as friends</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I didn&rsquo;t know that</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Best friends</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Crock once shipped an MS Word format for fill able PDFs</p>\n\n<p><strong>Marc</strong></p>\n\n<p>He wouldn&rsquo;t apologize on his controversial white space views so they canned him in a string literal</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Was on a plane with him coming back from FunConf. He told me all about it.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>He was coerced into it</p>\n\n<p>+{} style</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>He was not happy to see so many O'Reilly authors getting slash dotted for Angular directives.</p>\n\n<p>It&rsquo;s just F# anyway, right?</p>\n\n<p>Plus some syntactic sugar.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Ya but clearly Microsoft wanted to use SQLlite but they shipped CSVs anyways &ndash; Easier to web inspect</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>View source for evah!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Source maps is supposed to solve our code climate CommonJS modules right?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Do they use the ADB debugging protocol for blackberry 10s browser?</p>\n\n<p>Yup</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Only if you browser sniff</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Works great on new relic</p>\n\n<p>Just orchestrate your code by using esprima to re-write your Python</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Feature test the SASS components</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>That&rsquo;s what django does.</p>\n\n<p>Works like Mocha</p>\n\n<p>(Oh man, this is the most texts I&rsquo;ve sent since I first got my Nest)</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Lol well cappuccino tests objectiveJ In Ember so I&rsquo;m not surprised you can&rsquo;t Ajax more post messages</p>\n\n<p>60fps for life butter smooth requestAnimationFrame Safaris</p>\n\n<p>Exactly <em>proto</em> is accessible on every SVG viewport</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>yeah, i always extract it with restructuring assignments on my closures</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Inheritance call the super method on that ES6 lodash</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>ship it!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Deploy to heroku via Dropbox with a static site generating PDF</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>meme-generators built with semver’ed APNGs, now that smells like a nice unicode character map</p>\n\n<p>anti-aliasing always makes it look better though</p>\n\n<p>that’s why i use typescript to download my web fonts progressively enhancing my UX for my users on gameboy DXes.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>That&rsquo;s why progressive JPGs work so well!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>that was their Promise, if you will.</p>\n\n<p>but they rarely resolve at all</p>\n\n<p>and they swallow errors like hapi.js when it was using domains!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Observable generators</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Object.observe(redis) I always say</p>\n\n<p>or use Mutation Observers</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Built with linked list dust templates</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>yeah, then you can stream ‘em</p>\n\n<p>works ok with SPDY but not HTTP2</p>\n\n<p>subtle but important differences in frame rates if you’re on lie-fi</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Lol</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>i think that’s !important</p>\n\n<p>oh man, i’m fading like a bad jQuery animation</p>\n\n<p>good thing it has a chainable syntax</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Only if you transition the cubic bezier the GsAP 3dmatrix</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>translateZ hacks will help too</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Just return monads</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>object literal monads</p>\n\n<p>textmate 2 for windows</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Never use Symbols through in your Unicode</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>well, yeah, but Symbol.iterator makes more sense to attach as a primitive value if you’re using something like Cocoa</p>\n\n<p><strong>Marc</strong></p>\n\n<p>My battery is going to die before we finish this lol</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>i’m convinced we could do this for days, we’ve already done it for about an hour longer than i expected to, lol.</p>\n\n<p>good night my friend, i’ve got a plane to catch at an ungodly hour tomorrow 😊</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Dependency inject your dreams</p>\n\n<p>Sorry had to do it&hellip;</p>\n\n<hr><p>So <a href=\"https://twitter.com/1marc\">Marc Grabanski</a> invited me to come teach <a href=\"https://frontendmasters.com/workshops/web-apps/\">a workshop</a> the last two days for his company <a href=\"https://frontendmasters.com/\">Frontend Masters</a> in Minnesota.</p>\n\n<p>Yesterday after the workshop we were chatting about how ridiculous tech terminology has become, and frankly, just the sheer volume of it. We jokingly had a short, seemingly plausible conversations that actually make no sense. The above was a continuation of that. This industry is commically jargony.</p>\n\n<p>Follow <a href=\"https://twitter.com/1marc\">@1marc</a> and <a href=\"http://twitter.com/henrikjoreteg\">@HenrikJoreteg</a> on the twitters for potentially more random nonsense, but no gurantees.</p>","outputFile":"/blog/a-tech-industry-conversation.html","html":"<p>What follows is an actual SMS conversation I had this evening with Marc Grabanski (with only a few minor edits).</p><p><hr></p><p><strong>Marc</strong></p><p></p><p>Now we can finally write GWT natively and get the performance</p><p><strong>Henrik</strong></p><p>Greater Web Together™. It&rsquo;s finally living up to its name.</p><p><strong>Marc</strong></p><p>RxJS is basically making Objective C into Swift that runs in the browser it&rsquo;s great</p><p>Imagine a bootstrap that runs Ruby &ndash; mind blowing npm packages made easy</p><p>Install them all with a single gulp request &ndash; everything HTTP2 is faster than Python in web storm</p><p>Never again will we need flash!</p><p><strong>Henrik</strong></p><p>I heard they&rsquo;re replacing event emitter in node with event machine.</p><p><strong>Marc</strong></p><p>Thanks to Dart VM</p><p>WebGL is like WebRTC running through twisted &ndash; I mean how else are we going to take ES 2016 to the next level?</p><p><strong>Henrik</strong></p><p>Yeah, Dart is the VM that will change the world of evented ColdFusion in a way Flash arduinos never could.</p><p><strong>Marc</strong></p><p>Simple.</p><p><strong>Henrik</strong></p><p>It&rsquo;s like raspberry pi but with websocket support out of the box. Without the ant build configs.</p><p><strong>Marc</strong></p><p>Oh holy crap ya arduinos are going to change the DEV tools like crazy! Makes them run multi lingual APIs under water.</p><p><strong>Henrik</strong></p><p>Meteor is all over that shit</p><p>totes</p><p>I couldn&rsquo;t believe it, they&rsquo;re inlining react code natively now too.</p><p><strong>Marc</strong></p><p>Well meteor makes it easy to steal lots of credit cards with elastic search based WebKit.</p><p><strong>Henrik</strong></p><p>Yeah, but even if you skip meteor I can emulate that with a compromised JSON.stringify method in like 4 nanoseconds.</p><p>Just open devtools on the devtools in chrome and run mini mongo and its like getting root at the pentagon. But totally realtime.</p><p><strong>Marc</strong></p><p>Exactly</p><p>Buy that stuff with TOR coins</p><p><strong>Henrik</strong></p><p>That&rsquo;s why I only use tor on cat3 cables</p><p><strong>Marc</strong></p><p>Lol TOR exactly</p><p>Never in wifi or else you get massive Unit Tests</p><p><strong>Henrik</strong></p><p>It&rsquo;s like Silk Road without all the guppies. It&rsquo;s the rebirth of 1337 all over</p><p><strong>Marc</strong></p><p>Never want to unit test your wifi on Android or else you get super cooled byte code</p><p><strong>Henrik</strong></p><p>Just run it on OpenSauce. Then turn their test machines into a new self-spawning botnet</p><p>Game over</p><p><strong>Marc</strong></p><p>Game overs 😎</p><p><strong>Henrik</strong></p><p>Some Russian hacker did that. I think she was 3 at the time.</p><p><strong>Marc</strong></p><p>Thrash was her name</p><p><strong>Henrik</strong></p><p>😆</p><p><strong>Marc</strong></p><p>Very good at writing killer Visual Basic</p><p>I&rsquo;ve never seen VB look so much like Cobal in my life wow</p><p><strong>Henrik</strong></p><p>Yeah the hackathon didn&rsquo;t know what hit it.</p><p>Heard she wrote it in binary first then wrote some source code as documentation.</p><p><strong>Marc</strong></p><p>Amazing stuff. could crack a DOM API wide open and turn it into Luna</p><p><strong>Henrik</strong></p><p>The GPU nearly caught fire too.</p><p><strong>Marc</strong></p><p>GPU was storing way too much SQL though</p><p><strong>Henrik</strong></p><p>Luna!?! Oh shit. You didn&rsquo;t just say that in a text? The Facebook ex-something is totally in Asana getting notifications of these texts right now.</p><p><strong>Marc</strong></p><p>Replicated recursive functions across Ruby shards</p><p>Never before have I seen so many manifest files</p><p><strong>Henrik</strong></p><p>I totally base64 and dynamically salt my SQL <em>before</em> it goes into the GPU. That way it&rsquo;s thread safe.</p><p><strong>Marc</strong></p><p>Had to compile Ubuntu into Postgres</p><p><strong>Henrik</strong></p><p>Most people only do it before its stores on SSDs with Flux</p><p>True, that&rsquo;s a must</p><p><strong>Marc</strong></p><p>Bash files all over Redux it was a mess</p><p><strong>Henrik</strong></p><p>Cloudfront deals with that for me though</p><p><strong>Marc</strong></p><p>Nice</p><p><strong>Henrik</strong></p><p>Keeps it DRY, ya know?!</p><p><strong>Marc</strong></p><p>I keep VIM DRY as possible</p><p><strong>Henrik</strong></p><p>Yeah, also helps if you keep your JSON object oriented. Gang of Four FTW</p><p><strong>Marc</strong></p><p>58 key commands Into the module pattern</p><p><strong>Henrik</strong></p><p>I wrote that book</p><p><strong>Marc</strong></p><p>Only two people with 10 years of living on the web could possibly hack this event loop</p><p><strong>Henrik</strong></p><p>that’s brave in a world of GIF streaming and dynamic favicons</p><p><strong>Marc</strong></p><p>Living on the web writing NES emulators that is</p><p><strong>Henrik</strong></p><p>only if they’re embedding linux</p><p>how else would you control all those drones?</p><p>use proto buffers?!</p><p>raf loops! good call</p><p><strong>Marc</strong></p><p>No way</p><p>Did you write the book in Go?</p><p>I hear Go is like cucumber tests</p><p><strong>Henrik</strong></p><p>Well it was based on open source encryption, so it was partially written. Then npm said they&rsquo;re going public, which ruined those tests. &hellip;and my book with &lsquo;em</p><p><strong>Marc</strong></p><p>YC doesn&rsquo;t like when you write their books in Go</p><p><strong>Henrik</strong></p><p>I did a series D first, so they didn&rsquo;t mind</p><p>Plus, I take dogecoin</p><p>So it works out</p><p><strong>Marc</strong></p><p>Oh wow I&rsquo;ve never had a series D</p><p>I&rsquo;m only on my 5th SSH tunnel</p><p><strong>Henrik</strong></p><p>Well you already made yours, if you know what I mean.</p><p>Remember BOSH?!?</p><p><strong>Marc</strong></p><p>Is that like caniuse ?</p><p><strong>Henrik</strong></p><p>Kinda, yeah. I installed a Tesla house battery as a backup for my Triple RAIDed thumb drives.</p><p>Problem? Solved.</p><p>Bam!</p><p><strong>Marc</strong></p><p>Wow!</p><p>You must be printing horse js coins like crazy</p><p><strong>Henrik</strong></p><p>I don&rsquo;t wanna brag. But I&rsquo;m like notch, but I bought a <em>real</em> house.</p><p><strong>Marc</strong></p><p>The internet of things</p><p>Of things you buy with apply pay</p><p><strong>Henrik</strong></p><p>I hired Snoop Dogg to help me install the 3D printed travertine floor tiles.</p><p>Of course purchased with Apple Pay</p><p><strong>Marc</strong></p><p>Awesome was the 3D printer on spotify?</p><p>I hear there is a SaaS z-index you can lookup on MDN</p><p><strong>Henrik</strong></p><p>Rdio, but it used flash for a while so, that faded</p><p>You just have to use Basic auth and then change the font color so it no longer blends with the background.</p><p><strong>Marc</strong></p><p>Did you make a DSL for that?</p><p><strong>Henrik</strong></p><p>Naw, but i run a grease monkey script though. Then you don&rsquo;t have to think about it.</p><p><strong>Marc</strong></p><p>It just connects with Bluetooth getUserMedia, I see</p><p><strong>Henrik</strong></p><p>I metaprogrammed the grease monkey script while deploying chaos monkey on Google+ data centers.</p><p>Yeah</p><p><strong>Marc</strong></p><p>That must have been crazy</p><p><strong>Henrik</strong></p><p>It was a bit wild, but I was asleep when I wrote it</p><p><strong>Marc</strong></p><p>No one ever knew that jQuery had a method to detect heartbeat from a Perl script</p><p><strong>Henrik</strong></p><p>I know!! It&rsquo;s right there!!</p><p>Uber uses it</p><p>I&rsquo;m gonna go run a speed test on my gigabit apple car.</p><p><strong>Marc</strong></p><p>You can see the data in your apple health app it&rsquo;s all built on CLI algorithms</p><p><strong>Henrik</strong></p><p>True, it&rsquo;ll be keynoted tomorrow anyway.</p><p><strong>Marc</strong></p><p>XML RPC is the rage</p><p><strong>Henrik</strong></p><p>Especially on Google Glass</p><p>It&rsquo;s like FirePhone but cooler</p><p><strong>Marc</strong></p><p>Ya but the Apple TV is so far ahead because it&rsquo;s on Firebase</p><p>Twilio never saw Native script coming</p><p><strong>Henrik</strong></p><p>I heard rumors from watching Silicon Valley that they&rsquo;re thinking about switching to Parse, <em>because</em> of Native Script in Typescript</p><p>Just be sure to run it in strict mode or it&rsquo;s like http 1.0 all over again.</p><p><strong>Marc</strong></p><p>Ya that&rsquo;s a real problem with cyclomatic complexity in your semi colons</p><p><strong>Henrik</strong></p><p>yup, I was getting teapotted with 418s all day before I switched to semi-standard</p><p>Just add a grunt task though.</p><p>But only if you&rsquo;re on bower</p><p><strong>Marc</strong></p><p>No kidding</p><p>I always though nHibrinate was the solution for katas</p><p><strong>Henrik</strong></p><p>I think you&rsquo;re right</p><p>Saw that on my kanban</p><p><strong>Marc</strong></p><p>On run keeper?</p><p>I prefer basecamp over fresh books</p><p><strong>Henrik</strong></p><p>I use SPF records whenever I run though.</p><p>I have sensitive skin according to my apple watch</p><p><strong>Marc</strong></p><p>Oh ya the A records really helps when you call a Lyft to get your AirBNB</p><p><strong>Henrik</strong></p><p>Just point a CNAME to gh-pages first, but I totally agree</p><p>Jobs and Woz used to always talk about that.</p><p><strong>Marc</strong></p><p>Are those thread safe VR goggles going to crash google hangouts?</p><p><strong>Henrik</strong></p><p>No one listened though, they were so far ahead like Alan Kay, but with the Newton.</p><p><strong>Marc</strong></p><p>Elixir is kind of like gigabit 4G through Fiddler</p><p><strong>Henrik</strong></p><p>I think they might, they&rsquo;re bastardizing the WebRTC peer connections to stream Internet to the Loon project.</p><p>It&rsquo;s so non-standard</p><p><strong>Marc</strong></p><p>Oh ya like Ionic framework&rsquo;s ACID test</p><p><strong>Henrik</strong></p><p>That was a game changer.</p><p>Just like apple&rsquo;s ear pods</p><p>I ran those natively!</p><p><strong>Marc</strong></p><p>I TDD my beats headphones natively ya - for performance of course</p><p><strong>Henrik</strong></p><p>Yeah, it&rsquo;d be like doing BDD if you didn&rsquo;t. This isn&rsquo;t English! It&rsquo;s programming!!</p><p>I&rsquo;m gonna reimplement web components for telnet</p><p>But without HTML imports, of course</p><p><strong>Marc</strong></p><p>Make sure you use component JS on Octopress because otherwise people will steal your SSH keys</p><p><strong>Henrik</strong></p><p>With no babel though</p><p>Or else you&rsquo;ll get ES2014</p><p><strong>Marc</strong></p><p>VPN into webpack first</p><p><strong>Henrik</strong></p><p>IT&rsquo;S SO EASY TO DO THIS. I COULD WRITE THESE FOR THREE DAYS STRAIGHT! it&rsquo;s unbelievable.</p><p><strong>Marc</strong></p><p>Run a kickstarter for it!</p><p><strong>Henrik</strong></p><p>Kerberos auth to kickstarter, but I&rsquo;ll find my kickstarter video through an incubator I just funded on indiegogo.</p><p><strong>Marc</strong></p><p>Build a rapid prototype protocol</p><p><strong>Henrik</strong></p><p>I might just use DDP</p><p><strong>Marc</strong></p><p>Into CouchDB</p><p><strong>Henrik</strong></p><p>or&hellip; UDP!</p><p>I just need about half the packet-loss and I&rsquo;ll get funded.</p><p>That&rsquo;s what Theil told me</p><p><strong>Marc</strong></p><p>I hear UDP handshakes better than SSL through a CDN</p><p><strong>Henrik</strong></p><p>Good point</p><p>yahoo wants in too.</p><p>They killed Pipes!</p><p><strong>Marc</strong></p><p>Just like Google killed reader</p><p><strong>Henrik</strong></p><p>Beacon API is always better for calling home with. Otherwise AWS never gets the event data</p><p>&ldquo;OK Google&rdquo; amirite?!?</p><p><strong>Marc</strong></p><p>Isn&rsquo;t that GraphQL Siri on a XSS CORS call?</p><p><strong>Henrik</strong></p><p>Think so. But use movable type</p><p>Or it KILLS your wifi</p><p><strong>Marc</strong></p><p>Movable type is built on Functional reactive Pure Script so it&rsquo;s pretty much Ghost</p><p><strong>Henrik</strong></p><p>With JSP templates, but yeah.</p><p>LaTeX is just better anyway</p><p>Especially if you use D3 to render it</p><p><strong>Marc</strong></p><p>Like a mongo elastic search!</p><p><strong>Henrik</strong></p><p>I think I&rsquo;d run that as a docker container</p><p><strong>Marc</strong></p><p>On a Hadoop prerendered iframe</p><p><strong>Henrik</strong></p><p>But behind nginx</p><p><strong>Marc</strong></p><p>Never before have I seen so many processors running varnish</p><p><strong>Henrik</strong></p><p>Deploy it with ServiceWorker though. Or you may violate the CSP.</p><p>Unless it&rsquo;s MIT licensed.</p><p>Varnish is great.</p><p><strong>Marc</strong></p><p>They were spinning up so many Apache instances that the load balancers couldn&rsquo;t stand it except for in Google Gears running in Unity</p><p><strong>Henrik</strong></p><p>I just wrote an Object tag yesterday that did that but using Iced CoffeeScript so Eich would digg it on HN.</p><p>He re-tweeted me on pownce the other day.</p><p><strong>Marc</strong></p><p>Distributed go pros are all the stack overflow credit</p><p><strong>Henrik</strong></p><p>Stream it with EventSource</p><p>It&rsquo;s way more reliable that flash media server</p><p><strong>Marc</strong></p><p>Git tipped on underscore</p><p><strong>Henrik</strong></p><p>Don&rsquo;t go all TechCrunch Disrupt on me.</p><p><strong>Marc</strong></p><p>Crockford and Eich designed it though</p><p><strong>Henrik</strong></p><p>Crowd funded hackathons?</p><p><strong>Marc</strong></p><p>Together as friends</p><p><strong>Henrik</strong></p><p>I didn&rsquo;t know that</p><p><strong>Marc</strong></p><p>Best friends</p><p><strong>Henrik</strong></p><p>Crock once shipped an MS Word format for fill able PDFs</p><p><strong>Marc</strong></p><p>He wouldn&rsquo;t apologize on his controversial white space views so they canned him in a string literal</p><p><strong>Henrik</strong></p><p>Was on a plane with him coming back from FunConf. He told me all about it.</p><p><strong>Marc</strong></p><p>He was coerced into it</p><p>+{} style</p><p><strong>Henrik</strong></p><p>He was not happy to see so many O&#39;Reilly authors getting slash dotted for Angular directives.</p><p>It&rsquo;s just F# anyway, right?</p><p>Plus some syntactic sugar.</p><p><strong>Marc</strong></p><p>Ya but clearly Microsoft wanted to use SQLlite but they shipped CSVs anyways &ndash; Easier to web inspect</p><p><strong>Henrik</strong></p><p>View source for evah!</p><p><strong>Marc</strong></p><p>Source maps is supposed to solve our code climate CommonJS modules right?</p><p><strong>Henrik</strong></p><p>Do they use the ADB debugging protocol for blackberry 10s browser?</p><p>Yup</p><p><strong>Marc</strong></p><p>Only if you browser sniff</p><p><strong>Henrik</strong></p><p>Works great on new relic</p><p>Just orchestrate your code by using esprima to re-write your Python</p><p><strong>Marc</strong></p><p>Feature test the SASS components</p><p><strong>Henrik</strong></p><p>That&rsquo;s what django does.</p><p>Works like Mocha</p><p>(Oh man, this is the most texts I&rsquo;ve sent since I first got my Nest)</p><p><strong>Marc</strong></p><p>Lol well cappuccino tests objectiveJ In Ember so I&rsquo;m not surprised you can&rsquo;t Ajax more post messages</p><p>60fps for life butter smooth requestAnimationFrame Safaris</p><p>Exactly <em>proto</em> is accessible on every SVG viewport</p><p><strong>Henrik</strong></p><p>yeah, i always extract it with restructuring assignments on my closures</p><p><strong>Marc</strong></p><p>Inheritance call the super method on that ES6 lodash</p><p><strong>Henrik</strong></p><p>ship it!</p><p><strong>Marc</strong></p><p>Deploy to heroku via Dropbox with a static site generating PDF</p><p><strong>Henrik</strong></p><p>meme-generators built with semver’ed APNGs, now that smells like a nice unicode character map</p><p>anti-aliasing always makes it look better though</p><p>that’s why i use typescript to download my web fonts progressively enhancing my UX for my users on gameboy DXes.</p><p><strong>Marc</strong></p><p>That&rsquo;s why progressive JPGs work so well!</p><p><strong>Henrik</strong></p><p>that was their Promise, if you will.</p><p>but they rarely resolve at all</p><p>and they swallow errors like hapi.js when it was using domains!</p><p><strong>Marc</strong></p><p>Observable generators</p><p><strong>Henrik</strong></p><p>Object.observe(redis) I always say</p><p>or use Mutation Observers</p><p><strong>Marc</strong></p><p>Built with linked list dust templates</p><p><strong>Henrik</strong></p><p>yeah, then you can stream ‘em</p><p>works ok with SPDY but not HTTP2</p><p>subtle but important differences in frame rates if you’re on lie-fi</p><p><strong>Marc</strong></p><p>Lol</p><p><strong>Henrik</strong></p><p>i think that’s !important</p><p>oh man, i’m fading like a bad jQuery animation</p><p>good thing it has a chainable syntax</p><p><strong>Marc</strong></p><p>Only if you transition the cubic bezier the GsAP 3dmatrix</p><p><strong>Henrik</strong></p><p>translateZ hacks will help too</p><p><strong>Marc</strong></p><p>Just return monads</p><p><strong>Henrik</strong></p><p>object literal monads</p><p>textmate 2 for windows</p><p><strong>Marc</strong></p><p>Never use Symbols through in your Unicode</p><p><strong>Henrik</strong></p><p>well, yeah, but Symbol.iterator makes more sense to attach as a primitive value if you’re using something like Cocoa</p><p><strong>Marc</strong></p><p>My battery is going to die before we finish this lol</p><p><strong>Henrik</strong></p><p>i’m convinced we could do this for days, we’ve already done it for about an hour longer than i expected to, lol.</p><p>good night my friend, i’ve got a plane to catch at an ungodly hour tomorrow 😊</p><p><strong>Marc</strong></p><p>Dependency inject your dreams</p><p>Sorry had to do it&hellip;</p><p><hr></p><p>So <a href=https://twitter.com/1marc>Marc Grabanski</a> invited me to come teach <a href=\"https://frontendmasters.com/workshops/web-apps/\">a workshop</a> the last two days for his company <a href=\"https://frontendmasters.com/\">Frontend Masters</a> in Minnesota.</p><p></p><p>Yesterday after the workshop we were chatting about how ridiculous tech terminology has become, and frankly, just the sheer volume of it. We jokingly had a short, seemingly plausible conversations that actually make no sense. The above was a continuation of that. This industry is commically jargony.</p><p>Follow <a href=https://twitter.com/1marc>@1marc</a> and <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on the twitters for potentially more random nonsense, but no gurantees.</p>","preview":"<p>What follows is an actual SMS conversation I had this evening with Marc Grabanski (with only a few minor edits).</p><p></p><p><strong>Marc</strong></p><p></p><p>Now we can finally write GWT natively and get the performance</p><p><strong>Henrik</strong></p><p>Greater Web Together™. It&rsquo;s finally living up to its name.</p>"},{"slug":"imagine-life-as-a-game-in-which-you-are-juggling","type":"quote","date":"2015-06-20T05:23:28.000Z","old_url":"http://joreteg.com/post/121977988662/imagine-life-as-a-game-in-which-you-are-juggling","title":"CEO of Coca-Cola on Balance","tags":"balance, work","url":"/blog/imagine-life-as-a-game-in-which-you-are-juggling","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/06/imagine-life-as-a-game-in-which-you-are-juggling.html","markdown":"<blockquote><p>Imagine life as a game in which you are juggling some five balls in the air. You name them – work, family, health, friends and spirit – and you’re keeping all of these in the air.</p>\n\n<p>You will soon understand that work is a rubber ball. If you drop it, it will bounce back. But the other four balls – family, health, friends and spirit – are made of glass. If you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same.</p>\n\n<p>You must understand that and strive for Balance in your life.</p></blockquote>\n<p>by: Brian G. Dyson</p>\n\n<p>President and CEO, Coca-Cola Enterprises during his speech at the Georgia Tech 172nd Commencement Address Sept. 6, 1996</p>\n\n<p>Loved this, it&rsquo;s such a powerful analogy! You can read the <a href=\"http://www.dankind.com/blog/speech-by-bryan-dyson-ceo-coca-cola/\">full speech here</a>.</p>","outputFile":"/blog/imagine-life-as-a-game-in-which-you-are-juggling.html","html":"<p><blockquote><p>Imagine life as a game in which you are juggling some five balls in the air. You name them – work, family, health, friends and spirit – and you’re keeping all of these in the air.</p></blockquote></p><p>You will soon understand that work is a rubber ball. If you drop it, it will bounce back. But the other four balls – family, health, friends and spirit – are made of glass. If you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same.</p><p>You must understand that and strive for Balance in your life.</p><p>by: Brian G. Dyson</p><p>President and CEO, Coca-Cola Enterprises during his speech at the Georgia Tech 172nd Commencement Address Sept. 6, 1996</p><p>Loved this, it&rsquo;s such a powerful analogy! You can read the <a href=\"http://www.dankind.com/blog/speech-by-bryan-dyson-ceo-coca-cola/\">full speech here</a>.</p>","preview":"<p><blockquote><p>Imagine life as a game in which you are juggling some five balls in the air. You name them – work, family, health, friends and spirit – and you’re keeping all of these in the air.</p></blockquote></p><p>You will soon understand that work is a rubber ball. If you drop it, it will bounce back. But the other four balls – family, health, friends and spirit – are made of glass. If you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same.</p>"},{"slug":"back-from-the-future-insights-live-in-las-vegas","type":"text","date":"2015-06-05T18:11:37.000Z","title":"Back from the Future Insights Live in Las Vegas","old_url":"http://joreteg.com/post/120789927737/back-from-the-future-insights-live-in-las-vegas","url":"/blog/back-from-the-future-insights-live-in-las-vegas","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/06/back-from-the-future-insights-live-in-las-vegas.html","markdown":"<p>I had a blast at <a href=\"https://futureinsightslive.com/las-vegas-2015/\">Future Insights Live</a> in Vegas this week where I led a 1-day workshop on Building a Modular Front-end Application and gave a talk about Optimizing for Change (by using modular architectures).</p>\n\n<p>The event was a great mix of content and people, excellently curated and executed. Big props to <a href=\"https://twitter.com/bathcitygirl\">Sarah Robinson</a> and <a href=\"https://twitter.com/followellie\">Ellie Robinson</a> who produced the conference.</p>\n\n<p>Happy to have gotten to hang out with a bunch of really great people, such as <a href=\"https://jonathanstark.com/\">Jonathan Stark</a>, <a href=\"https://hitenism.com/\">Hiten Shah</a> (founder of <a href=\"https://kissmetrics.com/\">KissMetrics</a> and <a href=\"https://www.crazyegg.com\">CrazyEgg</a>), and seeing some friends from previous conferences like <a href=\"https://twitter.com/scottjenson\">Scott Jenson</a>.</p>\n\n<p>Biggest takeaways:</p>\n\n<ul><li>From Hiten&rsquo;s talk: Measure things, test things. So you can discover what actually works instead of blindly publishing things.</li>\n<li>The Physical Web stuff that Scott is working on at Google is really awesome and is still going strong: <a href=\"https://google.github.io/physical-web/\">https://google.github.io/physical-web/</a></li>\n<li>From Jonathan&rsquo;s keynote: </li>\n</ul><blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">2 billion smart phones on the planet now. \n4 billion predicted by 2020 (80% of adults).\n\n– <a href=\"https://twitter.com/jonathanstark\">@jonathanstark</a> at <a href=\"https://twitter.com/hashtag/FILIVE?src=hash\">#FILIVE</a></p>— Henrik Joreteg (@HenrikJoreteg) <a href=\"https://twitter.com/HenrikJoreteg/status/605769600458825728\">June 2, 2015</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","outputFile":"/blog/back-from-the-future-insights-live-in-las-vegas.html","html":"<p>I had a blast at <a href=\"https://futureinsightslive.com/las-vegas-2015/\">Future Insights Live</a> in Vegas this week where I led a 1-day workshop on Building a Modular Front-end Application and gave a talk about Optimizing for Change (by using modular architectures).</p><p>The event was a great mix of content and people, excellently curated and executed. Big props to <a href=https://twitter.com/bathcitygirl>Sarah Robinson</a> and <a href=https://twitter.com/followellie>Ellie Robinson</a> who produced the conference.</p><p>Happy to have gotten to hang out with a bunch of really great people, such as <a href=\"https://jonathanstark.com/\">Jonathan Stark</a>, <a href=\"https://hitenism.com/\">Hiten Shah</a> (founder of <a href=\"https://kissmetrics.com/\">KissMetrics</a> and <a href=https://www.crazyegg.com>CrazyEgg</a>), and seeing some friends from previous conferences like <a href=https://twitter.com/scottjenson>Scott Jenson</a>.</p><p>Biggest takeaways:</p><p><ul><li>From Hiten&rsquo;s talk: Measure things, test things. So you can discover what actually works instead of blindly publishing things.</li></ul></p><p><li>The Physical Web stuff that Scott is working on at Google is really awesome and is still going strong: <a href=\"https://google.github.io/physical-web/\">https://google.github.io/physical-web/</a></li></p><p><li>From Jonathan&rsquo;s keynote:</li><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>2 billion smart phones on the planet now. 4 billion predicted by 2020 (80% of adults).</p><p>– <a href=https://twitter.com/jonathanstark>@jonathanstark</a> at <a href=\"https://twitter.com/hashtag/FILIVE?src=hash\">#FILIVE</a></p>— Henrik Joreteg (@HenrikJoreteg) <a href=https://twitter.com/HenrikJoreteg/status/605769600458825728>June 2, 2015</a></blockquote></p><script async src=//platform.twitter.com/widgets.js charset=utf-8></script>","preview":"<p>I had a blast at <a href=\"https://futureinsightslive.com/las-vegas-2015/\">Future Insights Live</a> in Vegas this week where I led a 1-day workshop on Building a Modular Front-end Application and gave a talk about Optimizing for Change (by using modular architectures).</p><p>The event was a great mix of content and people, excellently curated and executed. Big props to <a href=https://twitter.com/bathcitygirl>Sarah Robinson</a> and <a href=https://twitter.com/followellie>Ellie Robinson</a> who produced the conference.</p>"},{"slug":"an-interview-i-did-with-oreillys-mac-slocum-at","type":"video","date":"2015-04-30T23:28:34.000Z","thumbnail_url":"https://i.ytimg.com/vi/bNwShmaITWE/hqdefault.jpg","video_type":"youtube","title":"My interview with Mac Slocum at FluentConf 2015","old_url":"http://joreteg.com/post/117808523317/an-interview-i-did-with-oreillys-mac-slocum-at","url":"/blog/an-interview-i-did-with-oreillys-mac-slocum-at","startingFilename":"/Users/hartzis/projects/joreteg.com/posts/2015/05/an-interview-i-did-with-oreillys-mac-slocum-at.html","markdown":"Discussing:\n\n- Native Web Apps\n- Web apps with deeper OS integration\n- Pre-rendering static HTML for NWAs\n- [Surge.sh](http://surge.sh)\n\n\n<iframe width=\"500\" height=\"281\"  id=\"youtube_iframe\" src=\"https://www.youtube.com/embed/bNwShmaITWE?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=\"0\" allowfullscreen></iframe>","outputFile":"/blog/an-interview-i-did-with-oreillys-mac-slocum-at.html","html":"<p>Discussing:</p><ul><li>Native Web Apps</li><li>Web apps with deeper OS integration</li><li>Pre-rendering static HTML for NWAs</li><li><a href=http://surge.sh>Surge.sh</a></li></ul><iframe width=500 height=281 id=youtube_iframe src=\"https://www.youtube.com/embed/bNwShmaITWE?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>","preview":"<p>Discussing:</p><ul><li>Native Web Apps</li><li>Web apps with deeper OS integration</li><li>Pre-rendering static HTML for NWAs</li><li><a href=http://surge.sh>Surge.sh</a></li></ul><iframe width=500 height=281 id=youtube_iframe src=\"https://www.youtube.com/embed/bNwShmaITWE?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>"}]}
